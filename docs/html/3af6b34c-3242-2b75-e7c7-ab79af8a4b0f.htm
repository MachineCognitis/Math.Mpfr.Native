<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>gmp_lib Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="gmp_lib class" /><meta name="System.Keywords" content="Math.Gmp.Native.gmp_lib class" /><meta name="System.Keywords" content="gmp_lib class, about gmp_lib class" /><meta name="Microsoft.Help.F1" content="Math.Gmp.Native.gmp_lib" /><meta name="Microsoft.Help.Id" content="T:Math.Gmp.Native.gmp_lib" /><meta name="Description" content="Represents all of the functions of the GNU MP library." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Math.Gmp.Native" /><meta name="file" content="3af6b34c-3242-2b75-e7c7-ab79af8a4b0f" /><meta name="guid" content="3af6b34c-3242-2b75-e7c7-ab79af8a4b0f" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MPFR Native Interface for .NET<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="846f5c8a-6cba-433e-9f18-cde2ff5695cd.htm" title="MPFR Native Interface for .NET" tocid="roottoc">MPFR Native Interface for .NET</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d9c51b9f-0c54-770b-28ea-6eebd8fef368.htm" title="Math.Gmp.Native" tocid="d9c51b9f-0c54-770b-28ea-6eebd8fef368">Math.Gmp.Native</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3af6b34c-3242-2b75-e7c7-ab79af8a4b0f.htm" title="gmp_lib Class" tocid="3af6b34c-3242-2b75-e7c7-ab79af8a4b0f">gmp_lib Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4c8c8860-0cde-fd90-76f1-81cd6fb7a125.htm" title="gmp_lib Properties" tocid="4c8c8860-0cde-fd90-76f1-81cd6fb7a125">gmp_lib Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="0fa7cbf3-e8f4-6b14-d829-8aa663e77c74.htm" title="gmp_lib Methods" tocid="0fa7cbf3-e8f4-6b14-d829-8aa663e77c74">gmp_lib Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="b4507d49-5a58-a25b-6ae3-ac7e599caab1.htm" title="gmp_lib Fields" tocid="b4507d49-5a58-a25b-6ae3-ac7e599caab1">gmp_lib Fields</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">gmp_lib Class</td></tr></table><span class="introStyle"></span> <div class="summary">
            Represents all of the functions of the GNU MP library.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST46929034_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Math.Gmp.Native<span id="LST46929034_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>gmp_lib</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="d9c51b9f-0c54-770b-28ea-6eebd8fef368.htm">Math.Gmp.Native</a><br />
    <strong>Assembly:</strong>
   Math.Gmp.Native (in Math.Gmp.Native.dll) Version: 1.0.0.0 (1.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">gmp_lib</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">gmp_lib</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">gmp_lib</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">gmp_lib</span> =  <span class="keyword">class</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">gmp_lib</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="4c3f1727-1891-2918-da3a-321930e883ed.htm">gmp_errno</a></td><td><div class="summary">
            Gets or sets the global GMP error number.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c9cb6a67-59b8-5c03-f31d-f252441c53f6.htm">_mpz_realloc</a></td><td><div class="summary">
            Change the space for <span class="parameter">integer</span> to <span class="parameter">new_alloc</span> limbs.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="2c68671c-cd5c-e2ec-52a2-65b0ca31c3d1.htm">allocate</a></td><td><div class="summary">
            Return a pointer to newly allocated space with at least <span class="parameter">alloc_size</span> bytes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="75d98417-7870-2f9c-096b-f60e76cb75e4.htm">free(IntPtr)</a></td><td><div class="summary">
            Free the unmanaged memory at <span class="parameter">ptr</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="d3ad552c-4d46-029e-9eeb-44d8abb800e2.htm">free(char_ptr)</a></td><td><div class="summary">
            De-allocate the space pointed to by <span class="parameter">ptr</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="f46e4103-d4c4-69c2-1363-a4cb17d9cfda.htm">free(gmp_randstate_t)</a></td><td><div class="summary">
            De-allocate the space pointed to by <span class="parameter">ptr</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="7924a2a3-75c1-0aa9-636f-4772d74a723f.htm">free(<span id="LST46929034_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_2?cpp=array&lt;");</script>mp_ptr<span id="LST46929034_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_3?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            De-allocate the space pointed to by <span class="parameter">ptrs</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="c10cea6f-22cd-f84c-c11a-5924ba0b0ee7.htm">free(void_ptr)</a></td><td><div class="summary">
            De-allocate the space pointed to by <span class="parameter">ptr</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="19ccd2e3-05f1-d4f4-79b7-28b4f26e5768.htm">free(void_ptr, size_t)</a></td><td><div class="summary">
            De-allocate the space pointed to by <span class="parameter">ptr</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fe6e46c3-8464-a080-b5fc-718589320cd5.htm">gmp_asprintf</a></td><td><div class="summary">
            Form a null-terminated string in a block of memory obtained from the current memory allocation function.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e3abec5c-9d83-babc-a020-ca4817962a21.htm">gmp_fprintf</a></td><td><div class="summary">
            Print to the stream <span class="parameter">fp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="50306850-d92d-5038-bbcc-c452cd3c69a9.htm">gmp_fscanf</a></td><td><div class="summary">
            Read from the stream <span class="parameter">fp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5c2015f3-41d2-7b80-5309-e41ccec0baaf.htm">gmp_printf</a></td><td><div class="summary">
             Print to the standard output stdout.
             </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="7ef82a61-e43a-78c7-a28f-8f2d0a5f59b1.htm">gmp_randclear</a></td><td><div class="summary">
            Free all memory occupied by <span class="parameter">state</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="89fff39e-9dc4-4d23-9460-301ae7df92d1.htm">gmp_randinit_default</a></td><td><div class="summary">
            Initialize <span class="parameter">state</span> with a default algorithm.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="21fdbc76-a0de-1f3a-195f-a5ae0cb3d1da.htm">gmp_randinit_lc_2exp</a></td><td><div class="summary">
            Initialize <span class="parameter">state</span> with a linear congruential algorithm X = (<span class="parameter">a</span>X + <span class="parameter">c</span>) mod 2^<span class="parameter">m2exp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f209112e-311a-88cd-becf-33bc3787f91d.htm">gmp_randinit_lc_2exp_size</a></td><td><div class="summary">
            Initialize <span class="parameter">state</span> for a linear congruential algorithm as per <a href="21fdbc76-a0de-1f3a-195f-a5ae0cb3d1da.htm">gmp_randinit_lc_2exp</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b3ed0ded-086a-41f1-6051-d08afa338da8.htm">gmp_randinit_mt</a></td><td><div class="summary">
            Initialize <span class="parameter">state</span> for a Mersenne Twister algorithm.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="494fa261-4044-f216-7041-a55d95a26f5b.htm">gmp_randinit_set</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> with a copy of the algorithm and state from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b31d5778-362b-b75f-40cc-4c8280ca889c.htm">gmp_randseed</a></td><td><div class="summary">
            Set an initial <span class="parameter">seed</span> value into <span class="parameter">state</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c5f4e595-de6c-a555-426d-6cb8f429a960.htm">gmp_randseed_ui</a></td><td><div class="summary">
            Set an initial <span class="parameter">seed</span> value into <span class="parameter">state</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="880c96b7-378e-3cdb-057e-b6eea1c9e529.htm">gmp_scanf</a></td><td><div class="summary">
            Read from the standard input <span class="code">stdin</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="61686857-e4a0-ad60-1419-2b87a79b06c1.htm">gmp_snprintf</a></td><td><div class="summary">
            Form a null-terminated string in <span class="parameter">buf</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8916c18b-a745-2699-2f0a-035cf62dd051.htm">gmp_sprintf</a></td><td><div class="summary">
            Form a null-terminated string in <span class="parameter">buf</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="279d21b9-bd04-522e-0759-d1add6fe6fae.htm">gmp_sscanf</a></td><td><div class="summary">
            Read from a null-terminated string <span class="parameter">s</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7b541895-53a8-b335-32de-d5b2224ff0f7.htm">gmp_urandomb_ui</a></td><td><div class="summary">
            Generate a uniformly distributed random number of <span class="parameter">n</span> bits, i.e. in the range 0 to 2^<span class="parameter">n</span> - 1 inclusive.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="020d0663-b84b-54aa-8e2f-645ed532d175.htm">gmp_urandomm_ui</a></td><td><div class="summary">
            Generate a uniformly distributed random number in the range 0 to <span class="parameter">n</span> - 1, inclusive.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bd7a38bd-df52-4b0f-36d4-eb539767d89f.htm">gmp_vasprintf</a></td><td><div class="summary">
            Form a null-terminated string in a block of memory obtained from the current memory allocation function.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="62c5f2f4-2a93-e6d2-b867-23d4f2b98af4.htm">gmp_vfprintf</a></td><td><div class="summary">
            Print to the stream <span class="parameter">fp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="316be139-2970-161f-ba7c-730f067b5cf3.htm">gmp_vfscanf</a></td><td><div class="summary">
            Read from the stream <span class="parameter">fp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8031c594-b2b2-fa62-7088-00b6fe92f88e.htm">gmp_vprintf</a></td><td><div class="summary">
             Print to the standard output stdout.
             </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e5060da5-cafd-67e7-f18f-3a9d3c2aba7d.htm">gmp_vscanf</a></td><td><div class="summary">
            Read from the standard input <span class="code">stdin</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="300c388f-ba1c-0ba3-64fd-e7aafb39dcdb.htm">gmp_vsnprintf</a></td><td><div class="summary">
            Form a null-terminated string in <span class="parameter">buf</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="56e1a610-d238-ab9f-87b5-001764290847.htm">gmp_vsprintf</a></td><td><div class="summary">
            Form a null-terminated string in <span class="parameter">buf</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1a966758-12dc-4da3-cb22-b3b3d788ba02.htm">gmp_vsscanf</a></td><td><div class="summary">
            Read from a null-terminated string <span class="parameter">s</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9a229bed-b8b6-e0ad-f153-689455252ec4.htm">mp_get_memory_functions</a></td><td><div class="summary">
            Get the current allocation functions, storing function pointers to the locations given by the arguments.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="15ac48e3-750c-d154-7d8f-6dcaa137f5db.htm">mp_set_memory_functions</a></td><td><div class="summary">
            Replace the current allocation functions from the arguments.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="17731ba4-bf91-6b9b-737a-a9cc306ba17d.htm">mpf_abs</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to | <span class="parameter">op</span> |. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c19999f1-01ee-a3fe-dc4d-2a459e73492d.htm">mpf_add</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> + <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="45a76d5c-c5bf-e7f8-906a-15d290e9a50d.htm">mpf_add_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> + <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9b4a5f6b-3f8e-a957-ae84-303c6897aeb4.htm">mpf_ceil</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op</span> rounded to the next higher integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3a2a17ed-a64c-8716-7f65-18c661a5279f.htm">mpf_clear</a></td><td><div class="summary">
            Free the space occupied by <span class="parameter">x</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bfb87570-3b2e-079a-1528-3746424bbdef.htm">mpf_clears</a></td><td><div class="summary">
            Free the space occupied by a NULL-terminated list of <a href="37c88d6c-8d02-2330-ad77-f20fb73d1677.htm">mpf_t</a> variables. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="be9e6a25-83fb-49c2-949a-b8642a8234f5.htm">mpf_cmp</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4f0f115a-3956-13f7-4d6f-0157936c03bd.htm">mpf_cmp_d</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d9d29633-42c7-fb1c-cdee-3b7993f45653.htm">mpf_cmp_si</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5a168ae0-405b-7259-0853-84999876c47a.htm">mpf_cmp_ui</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5236d7a8-b79f-add8-4898-997e9d6a68bf.htm">mpf_cmp_z</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4e876639-72f5-7659-f4a9-862639e27e1c.htm">mpf_div</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> / <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="352401d6-c6d1-29c1-a9f6-e5e0ed46bc86.htm">mpf_div_2exp</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> / 2^<span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3985111a-6d13-b418-9c90-422a8e1e5b8b.htm">mpf_div_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> / <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5ea7691b-2a0f-5f25-290c-54c78e2cf3bd.htm">mpf_fits_sint_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in a 32-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6c178e2d-a080-13b8-75b0-3fe232b46d75.htm">mpf_fits_slong_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in a 32-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="142199e1-6aef-83d5-1986-1b1248ddc6e3.htm">mpf_fits_sshort_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in a 16-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="201b1b12-bb0c-6a53-c6d5-e75db73f8470.htm">mpf_fits_uint_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in an unsigned 32-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d1b172bb-9c87-c255-a736-4b8ef1f6a5fe.htm">mpf_fits_ulong_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in an unsigned 32-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ada84e5e-397e-e963-7d50-e260d4a104f7.htm">mpf_fits_ushort_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> fits in an unsigned 16-bit integer, when truncated to an integer. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f7584918-b77f-3524-eea2-04134a2c3ba6.htm">mpf_floor</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op</span> rounded to the next lower integer.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="648fa405-45d3-506a-f6be-72642e8a7f32.htm">mpf_get_d</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">double</a>, truncating if necessary (i.e. rounding towards zero). 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e1edc21e-74a0-b44c-216b-bad204b5a48a.htm">mpf_get_d_2exp</a></td><td><div class="summary">
            Convert op to a double, truncating if necessary (i.e. rounding towards zero), and with an exponent returned separately. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1ca4ec7e-b5d1-3b51-8341-5a345990e62d.htm">mpf_get_default_prec</a></td><td><div class="summary">
            Return the default precision actually used. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="96c4a09e-3f83-00ab-30d0-78a82764b0ce.htm">mpf_get_prec</a></td><td><div class="summary">
            Return the current precision of <span class="parameter">op</span>, in bits. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d948e832-ee71-628a-6a7b-766138afff62.htm">mpf_get_si</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a 32-bit integer, truncating any fraction part.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9e7b9239-a7a8-4667-f6c7-bfc142d3f429.htm">mpf_get_str(char_ptr, mp_exp_t<span id="LST46929034_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_4?cpp=%");</script>, Int32, size_t, mpf_t)</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bad56282-fbca-6e3b-03c8-085cff07eed8.htm">mpf_get_str(char_ptr, ptr<span id="LST46929034_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_5?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>mp_exp_t<span id="LST46929034_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_6?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32, size_t, mpf_t)</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="aa3fd0ea-a8b6-674b-59ff-b6d4785baed1.htm">mpf_get_ui</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to an unsigned 32-bit integer, truncating any fraction part.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0dd846ac-56b6-3ea8-0441-12490f67fbf7.htm">mpf_init</a></td><td><div class="summary">
            Initialize <span class="parameter">x</span> to 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="17b3dc26-68af-fb0c-9923-36777e8bd87e.htm">mpf_init_set</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a2c14761-1b23-0de9-3842-c2d4e3d7aac0.htm">mpf_init_set_d</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="dc1406fd-4ca4-70d3-dc83-bd40b955564a.htm">mpf_init_set_si</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4e30a5e0-637b-949e-a627-387a56945f7b.htm">mpf_init_set_str</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value from the string in <span class="parameter">str</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8d1b97c9-ef9d-303a-0fbe-e7ece7edf391.htm">mpf_init_set_ui</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="98083eac-9993-41b2-4943-678785fce712.htm">mpf_init2</a></td><td><div class="summary">
            Initialize <span class="parameter">x</span> to 0 and set its precision to be at least <span class="parameter">prec</span> bits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="018278a0-148f-c898-5bd0-42aae4ae0069.htm">mpf_inits</a></td><td><div class="summary">
            Initialize a NULL-terminated list of <a href="37c88d6c-8d02-2330-ad77-f20fb73d1677.htm">mpf_t</a> variables, and set their values to 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3a24f5bd-0b45-8164-f27b-c2e04e35ab64.htm">mpf_inp_str</a></td><td><div class="summary">
            Read a string in base <span class="parameter">base</span> from <span class="parameter">stream</span>, and put the read float in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="11a036ec-5052-7dc4-bdb6-10e5c92f88cc.htm">mpf_integer_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> is an integer.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="309e6a8c-1318-2d30-a058-f119193546a0.htm">mpf_mul</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2041c81e-218b-b514-5a7b-5ee315711bc9.htm">mpf_mul_2exp</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * 2^<span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="99a405b5-c051-9905-cf57-7139a0e503cf.htm">mpf_mul_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="357791cb-951d-5542-ff67-c00ef5e9aadb.htm">mpf_neg</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to -<span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="feafa6f8-9793-d704-31a8-67c2cec0c33e.htm">mpf_out_str</a></td><td><div class="summary">
            Print <span class="parameter">op</span> to <span class="parameter">stream</span>, as a string of digits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="96e2fb95-0ac0-3d24-bea9-ee5631f30347.htm">mpf_pow_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span>^<span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="cc6e8f51-f396-f6c3-c6e4-9a9aeeaf2a13.htm">mpf_random2</a></td><td><div class="summary">
            Generate a random float of at most <span class="parameter">max_size</span> limbs, with long strings of zeros and ones in the binary representation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f485faa1-3758-8316-f712-42e0fc2058a8.htm">mpf_reldiff</a></td><td><div class="summary">
            Compute the relative difference between <span class="parameter">op1</span> and <span class="parameter">op2</span> and store the result in <span class="parameter">rop</span>. This is | <span class="parameter">op1</span> - <span class="parameter">op2</span> | / <span class="parameter">op1</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3a025035-e715-0a3d-8d2d-6011430c9463.htm">mpf_set</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1d0c5734-9f0d-ec6b-c540-4379f832b0ca.htm">mpf_set_d</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9e93d02e-f5c7-1a6f-68fe-a33d793a93e2.htm">mpf_set_default_prec</a></td><td><div class="summary">
            Set the default precision to be at least <span class="parameter">prec</span> bits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="438e6843-fc7b-4e6f-9ac0-d97a2773b032.htm">mpf_set_prec</a></td><td><div class="summary">
            Set the precision of <span class="parameter">rop</span> to be at least <span class="parameter">prec</span> bits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b456f637-83f4-9d4f-18c5-052d77fbf981.htm">mpf_set_prec_raw</a></td><td><div class="summary">
            Set the precision of <span class="parameter">rop</span> to be at least <span class="parameter">prec</span> bits, without changing the memory allocated. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bd669b1e-a941-2e35-7c29-29a5b5ff5e3a.htm">mpf_set_q</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f059f8e4-dfc8-79fe-6455-42e227ccbc2e.htm">mpf_set_si</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="823b356e-0731-c9ca-0b37-660b6eb9ee7c.htm">mpf_set_str</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from the string in <span class="parameter">str</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="060aa73e-8c00-0a6b-f569-ad198c4f0d90.htm">mpf_set_ui</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d60489f8-91f8-ea00-d29c-a52449e712da.htm">mpf_set_z</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d229629f-3bba-817b-d9a3-6f00271e1da7.htm">mpf_sgn</a></td><td><div class="summary">
            Return +1 if op &gt; 0, 0 if op = 0, and -1 if op &lt; 0. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4c81a27a-206c-e5da-44e9-0ac7767b3366.htm">mpf_size</a></td><td><div class="summary">
            Return the number of limbs currently in use.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="00a7e91d-b046-f5d3-5b51-55868d87e228.htm">mpf_sqrt</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the square root of <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="44e6038b-2e97-b53d-0d46-ce1fff3522d0.htm">mpf_sqrt_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the square root of <span class="parameter">op</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="718e7623-d25b-8a09-2543-745f24cd82c1.htm">mpf_sub</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ca339303-b509-db06-c875-3aac3edec5dd.htm">mpf_sub_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b77c0292-518a-64d8-4b4e-0dd3c0cb801f.htm">mpf_swap</a></td><td><div class="summary">
            Swap <span class="parameter">rop1</span> and <span class="parameter">rop2</span> efficiently. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3ac2ecd4-f154-de62-9170-b2d28f362a7e.htm">mpf_trunc</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op</span> rounded to the integer towards zero. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="34a39f93-359c-526f-c9ad-cd7558968f1e.htm">mpf_ui_div</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> / <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="efbe678f-e1f3-b203-eb36-0db03ba11795.htm">mpf_ui_sub</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5a698221-639e-333b-061b-0aa3f76c38e9.htm">mpf_urandomb</a></td><td><div class="summary">
            Generate a uniformly distributed random float in <span class="parameter">rop</span>, such that 0 ≤ rop &lt; 1, with <span class="parameter">nbits</span> significant bits in the mantissa or less if the precision of <span class="parameter">rop</span> is smaller.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b9df04c4-224e-f2ad-8e90-fbb3b30bd76d.htm">mpn_add</a></td><td><div class="summary">
            Add {<span class="parameter">s1p</span>, <span class="parameter">s1n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">s2n</span>}, and write the <span class="parameter">s1n</span> least significant limbs of the result to <span class="parameter">rp</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5562b14f-48a4-be75-2eb0-6a129cd0d5ab.htm">mpn_add_1</a></td><td><div class="summary">
            Add {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and <span class="parameter">s2limb</span>, and write the <span class="parameter">n</span> least significant limbs of the result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="339edb73-5781-7d73-97b6-9b73451a698f.htm">mpn_add_n</a></td><td><div class="summary">
            Add {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the <span class="parameter">n</span> least significant limbs of the result to <span class="parameter">rp</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="77fdf32b-986d-4df3-3c76-022e3e3fbb98.htm">mpn_addmul_1</a></td><td><div class="summary">
            Multiply {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and <span class="parameter">s2limb</span>, and add the <span class="parameter">n</span> least significant limbs of the product to {<span class="parameter">rp</span>, <span class="parameter">n</span>} and write the result to <span class="parameter">rp</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="69ffabc9-a19c-6590-d918-fbf0710aff82.htm">mpn_and_n</a></td><td><div class="summary">
            Perform the bitwise logical and of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b8b6d088-3330-5073-dc17-18ea23b0fc14.htm">mpn_andn_n</a></td><td><div class="summary">
            Perform the bitwise logical and of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and the bitwise complement of {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4fcc5434-e328-6730-f46e-bd0823ec7560.htm">mpn_cmp</a></td><td><div class="summary">
            Compare {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="27902901-3a7d-b5b3-d3fc-3900f754bff1.htm">mpn_cnd_add_n</a></td><td><div class="summary">
            If <span class="parameter">cnd</span> is non-zero, it produces the same result as a regular <a href="339edb73-5781-7d73-97b6-9b73451a698f.htm">mpn_add_n</a>, and if <span class="parameter">cnd</span> is zero, it copies {<span class="parameter">s1p</span>, <span class="parameter">n</span>} to the result area and returns zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b82bad6a-f8f0-db53-a6d3-ed6002046257.htm">mpn_cnd_sub_n</a></td><td><div class="summary">
            If <span class="parameter">cnd</span> is non-zero, it produces the same result as a regular <a href="b104184e-cf49-dbdb-764a-9dee5cf7b2fd.htm">mpn_sub_n</a>, and if <span class="parameter">cnd</span> is zero, it copies {<span class="parameter">s1p</span>, <span class="parameter">n</span>} to the result area and returns zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f0985ccc-17da-8a0b-066c-53df9b1921a1.htm">mpn_cnd_swap</a></td><td><div class="summary">
            If <span class="parameter">cnd</span> is non-zero, swaps the contents of the areas {<span class="parameter">ap</span>, <span class="parameter">n</span>} and {<span class="parameter">bp</span>, <span class="parameter">n</span>}. Otherwise, the areas are left unmodified.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6f0c915a-514a-fce0-957b-50180f4b79a7.htm">mpn_com</a></td><td><div class="summary">
            Perform the bitwise complement of {<span class="parameter">sp</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="78443f19-f0c6-4a1f-1eed-a815b734e981.htm">mpn_copyd</a></td><td><div class="summary">
            Copy from {<span class="parameter">s1p</span>, <span class="parameter">n</span>} to {<span class="parameter">rp</span>, <span class="parameter">n</span>}, decreasingly. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="00d8413a-b34b-5e89-193c-1bfe522710c5.htm">mpn_copyi</a></td><td><div class="summary">
            Copy from {<span class="parameter">s1p</span>, <span class="parameter">n</span>} to {<span class="parameter">rp</span>, <span class="parameter">n</span>}, increasingly. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1d6343a5-d42c-c362-714e-e10730e6a6d5.htm">mpn_divexact_1</a></td><td><div class="summary">
            Divide {<span class="parameter">sp</span>, <span class="parameter">n</span>} by <span class="parameter">d</span>, expecting it to divide exactly, and writing the result to {r<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="75f2a84e-44f3-b7cc-e6ad-392111d5b9cc.htm">mpn_divexact_by3</a></td><td><div class="summary">
            Divide {<span class="parameter">sp</span>, <span class="parameter">n</span>} by 3, expecting it to divide exactly, and writing the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c40ea3de-d1be-146b-fe7a-deff566ca817.htm">mpn_divexact_by3c</a></td><td><div class="summary">
            Divide {<span class="parameter">sp</span>, <span class="parameter">n</span>} by 3, expecting it to divide exactly, and writing the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9074a45b-0d68-cf18-75fe-076e720a9a61.htm">mpn_divmod_1</a></td><td><div class="summary">
            Divide {<span class="parameter">s2p</span>, <span class="parameter">s2n</span>} by <span class="parameter">s3limb</span>, and write the quotient at <span class="parameter">r1p</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f5c3f25d-1ad5-b3be-fc4b-280a62869912.htm">mpn_divrem_1</a></td><td><div class="summary">
            Divide {<span class="parameter">s2p</span>, <span class="parameter">s2n</span>} by <span class="parameter">s3limb</span>, and write the quotient at <span class="parameter">r1p</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="24ecd2d5-422f-e538-fd43-94b749652393.htm">mpn_gcd</a></td><td><div class="summary">
            Set {<span class="parameter">rp</span>, retval} to the greatest common divisor of {<span class="parameter">xp</span>, <span class="parameter">xn</span>} and {<span class="parameter">yp</span>, <span class="parameter">yn</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="64373933-f98b-74b4-c10f-3b1a98c410bc.htm">mpn_gcd_1</a></td><td><div class="summary">
            Return the greatest common divisor of {<span class="parameter">xp</span>, <span class="parameter">xn</span>} and <span class="parameter">ylimb</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c7536923-2242-a346-3211-02806aebd69f.htm">mpn_gcdext(mp_ptr, mp_ptr, mp_size_t<span id="LST46929034_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_7?cpp=%");</script>, mp_ptr, mp_size_t, mp_ptr, mp_size_t)</a></td><td><div class="summary">
            Compute the greatest common divisor G of U and V. Compute a cofactor S such that G = US + VT.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="746d102a-5f3e-6142-b02a-63f3cac385ab.htm">mpn_gcdext(mp_ptr, mp_ptr, ptr<span id="LST46929034_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_8?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>mp_size_t<span id="LST46929034_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_9?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, mp_ptr, mp_size_t, mp_ptr, mp_size_t)</a></td><td><div class="summary">
            Compute the greatest common divisor G of U and V. Compute a cofactor S such that G = US + VT.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1e9cacd7-32b3-7f3b-659a-efdb3e064092.htm">mpn_get_str</a></td><td><div class="summary">
            Convert {<span class="parameter">s1p</span>, <span class="parameter">s1n</span>} to a raw unsigned char array at <span class="parameter">str</span> in base <span class="parameter">base</span>, and return the number of characters produced.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="caf28774-7b13-0802-858c-a49970d7aa55.htm">mpn_hamdist</a></td><td><div class="summary">
            Compute the hamming distance between {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, which is the number of bit positions where the two operands have different bit values. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f4c54e3b-1c09-d01d-eb28-b7b05cf6fa70.htm">mpn_ior_n</a></td><td><div class="summary">
            Perform the bitwise logical inclusive or of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1b76ffd8-d7f4-5309-3b10-e7e0c418706a.htm">mpn_iorn_n</a></td><td><div class="summary">
            Perform the bitwise logical inclusive or of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and the bitwise complement of {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b52f3ab3-7ad3-7dde-14a2-83c81840b829.htm">mpn_lshift</a></td><td><div class="summary">
            Shift {<span class="parameter">sp</span>, <span class="parameter">n</span>} left by <span class="parameter">count</span> bits, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9aa24cc8-8cf5-4b8a-cd1b-5ded400efa50.htm">mpn_mod_1</a></td><td><div class="summary">
            Divide {<span class="parameter">s1p</span>, <span class="parameter">s1n</span>} by <span class="parameter">s2limb</span>, and return the remainder. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="68d3161d-2909-1909-cda7-e87949ee27ce.htm">mpn_mul</a></td><td><div class="summary">
            Multiply {<span class="parameter">s1p</span>, <span class="parameter">s1n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">s2n</span>}, and write the (<span class="parameter">s1n</span> + <span class="parameter">s2n</span>)-limb result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b819fb3b-5d3e-ff23-1687-0e71af684bd7.htm">mpn_mul_1</a></td><td><div class="summary">
            Multiply {<span class="parameter">s1p</span>, <span class="parameter">n</span>} by <span class="parameter">s2limb</span>, and write the <span class="parameter">n</span> least significant limbs of the product to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ee321a9a-852a-993e-f602-72ff2af02ff6.htm">mpn_mul_n</a></td><td><div class="summary">
            Multiply {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the (2 * <span class="parameter">n</span>)-limb result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a7d1fd40-0415-b4af-1787-706d245ff96e.htm">mpn_nand_n</a></td><td><div class="summary">
            Perform the bitwise logical and of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the bitwise complement of the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9fb96802-e56e-8fd8-cef2-b44870d09a10.htm">mpn_neg</a></td><td><div class="summary">
            Perform the negation of {<span class="parameter">sp</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c7d8bbe3-23cd-3460-be24-3a3ac3b28cf4.htm">mpn_nior_n</a></td><td><div class="summary">
            Perform the bitwise logical inclusive or of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the bitwise complement of the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="61401484-d06f-ab9e-110d-b46f4d0a9eba.htm">mpn_perfect_power_p</a></td><td><div class="summary">
            Return non-zero iff {<span class="parameter">sp</span>, <span class="parameter">n</span>} is a perfect power.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a5dfd9bc-f86b-8a3b-69fc-8d2d5dea30ae.htm">mpn_perfect_square_p</a></td><td><div class="summary">
            Return non-zero iff {<span class="parameter">s1p</span>, <span class="parameter">n</span>} is a perfect square.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3bd9de08-5768-bb79-1e09-2953ae1483aa.htm">mpn_popcount</a></td><td><div class="summary">
            Count the number of set bits in {<span class="parameter">s1p</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6d4f993a-1fd6-9db2-c0a7-0f3926863565.htm">mpn_random</a></td><td><div class="summary">
            Generate a random number of length <span class="parameter">r1n</span> and store it at <span class="parameter">r1p</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="06d850ef-82b2-56f1-32ae-2f1724da3d5b.htm">mpn_random2</a></td><td><div class="summary">
            Generate a random number of length <span class="parameter">r1n</span> and store it at <span class="parameter">r1p</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bb46ebe4-c002-8769-19ed-136a86e87134.htm">mpn_rshift</a></td><td><div class="summary">
            Shift {<span class="parameter">sp</span>, <span class="parameter">n</span>} right by <span class="parameter">count</span> bits, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ae66c86a-cc34-81be-2a38-e841e8a36f43.htm">mpn_scan0</a></td><td><div class="summary">
            Scan <span class="parameter">s1p</span> from bit position <span class="parameter">bit</span> for the next clear bit.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="95c5a467-0bfe-337e-f6ca-657cf8c19eb1.htm">mpn_scan1</a></td><td><div class="summary">
            Scan <span class="parameter">s1p</span> from bit position <span class="parameter">bit</span> for the next set bit.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1555cd52-98d2-6253-214a-d342a539bfb5.htm">mpn_sec_add_1</a></td><td><div class="summary">
            Set R to A + b, where R = {<span class="parameter">rp</span>, <span class="parameter">n</span>}, A = {<span class="parameter">ap</span>, <span class="parameter">n</span>}, and <span class="parameter">b</span> is a single limb.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="87bbc39f-b11a-76d9-f31d-f5dcf365a67d.htm">mpn_sec_add_1_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="1555cd52-98d2-6253-214a-d342a539bfb5.htm">mpn_sec_add_1</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6f1dca2b-39f4-3acd-71fb-4f1e5a0d04e6.htm">mpn_sec_div_qr</a></td><td><div class="summary">
            Set Q to the truncated quotient N / D and R to N modulo D, where N = {<span class="parameter">np</span>, <span class="parameter">nn</span>}, D = {<span class="parameter">dp</span>, <span class="parameter">dn</span>}, Q’s most significant limb is the function return value and the remaining limbs are {<span class="parameter">qp</span>, <span class="parameter">nn</span> - <span class="parameter">dn</span>}, and R = {<span class="parameter">np</span>, <span class="parameter">dn</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="b9e1a8f8-5156-ca69-337b-e67c2fd851f7.htm">mpn_sec_div_qr_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="6f1dca2b-39f4-3acd-71fb-4f1e5a0d04e6.htm">mpn_sec_div_qr</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="094ea390-8cc8-bac7-35c3-3616775736de.htm">mpn_sec_div_r</a></td><td><div class="summary">
            Set R to N modulo D, where N = {<span class="parameter">np</span>, <span class="parameter">nn</span>}, D = {<span class="parameter">dp</span>, <span class="parameter">dn</span>}, and R = {<span class="parameter">np</span>, <span class="parameter">dn</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="1cefa5f6-adc3-30a6-b3bd-cb6a7543cb00.htm">mpn_sec_div_r_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="094ea390-8cc8-bac7-35c3-3616775736de.htm">mpn_sec_div_r</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="62ffb793-b32f-e0dc-a399-f20fe708a803.htm">mpn_sec_invert</a></td><td><div class="summary">
            Set R to the inverse of A modulo M, where R = {<span class="parameter">rp</span>, <span class="parameter">n</span>}, A = {<span class="parameter">ap</span>, <span class="parameter">n</span>}, and M = {<span class="parameter">mp</span>, <span class="parameter">n</span>}. This function’s interface is preliminary. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="ec24a122-714e-5b6f-9872-95fd5fda54ea.htm">mpn_sec_invert_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="62ffb793-b32f-e0dc-a399-f20fe708a803.htm">mpn_sec_invert</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="028e92d4-3699-77ff-e8da-9ff4c367f5b3.htm">mpn_sec_mul</a></td><td><div class="summary">
            Set R to A * B, where A = {<span class="parameter">ap</span>, <span class="parameter">an</span>}, B = {<span class="parameter">bp</span>, <span class="parameter">bn</span>}, and R = {<span class="parameter">rp</span>, <span class="parameter">an</span> + <span class="parameter">bn</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="b07466c5-6249-332d-e89b-aeb3675970ff.htm">mpn_sec_mul_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="028e92d4-3699-77ff-e8da-9ff4c367f5b3.htm">mpn_sec_mul</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a38b87c5-c6ac-fa68-6d58-c45793bf933e.htm">mpn_sec_powm</a></td><td><div class="summary">
            Set R to (B^E) modulo M, where R = {<span class="parameter">rp</span>, <span class="parameter">n</span>}, M = {<span class="parameter">mp</span>, <span class="parameter">n</span>}, and E = {<span class="parameter">ep</span>, ceil(<span class="parameter">enb</span> / <a href="f88c76a8-118a-5cbd-0df1-e30adcacb8ae.htm">mp_bits_per_limb</a>)}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="96652cce-b8f1-0b9e-8434-19cf9bb3eb29.htm">mpn_sec_powm_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="a38b87c5-c6ac-fa68-6d58-c45793bf933e.htm">mpn_sec_powm</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bfe1e9b5-6fc1-95f2-d5b6-137fe87c071a.htm">mpn_sec_sqr</a></td><td><div class="summary">
            Set R to A^2, where A = {<span class="parameter">ap</span>, <span class="parameter">an</span>}, and R = {<span class="parameter">rp</span>, 2 * <span class="parameter">an</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="1ba86b5b-8ace-b6ee-99c5-32a8d7648519.htm">mpn_sec_sqr_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="bfe1e9b5-6fc1-95f2-d5b6-137fe87c071a.htm">mpn_sec_sqr</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9137a632-abd2-7963-1991-85e6d753bf13.htm">mpn_sec_sub_1</a></td><td><div class="summary">
            Set R to A - b, where R = {<span class="parameter">rp</span>, <span class="parameter">n</span>}, A = {<span class="parameter">ap</span>, <span class="parameter">n</span>}, and <span class="parameter">b</span> is a single limb.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="098c8787-2069-5d1e-a2f9-1f78bdcd60a9.htm">mpn_sec_sub_1_itch</a></td><td><div class="summary">
            Return the scratch space in number of limbs required by the function <a href="9137a632-abd2-7963-1991-85e6d753bf13.htm">mpn_sec_sub_1</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3588cf60-567a-6182-20e8-5e2836498f49.htm">mpn_sec_tabselect</a></td><td><div class="summary">
            Select entry <span class="parameter">which</span> from table <span class="parameter">tab</span>, which has <span class="parameter">nents</span> entries, each <span class="parameter">n</span> limbs. Store the selected entry at <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9a68645a-d8d6-f4c1-f706-0dc217f9809a.htm">mpn_set_str</a></td><td><div class="summary">
            Convert bytes {<span class="parameter">str</span>, <span class="parameter">strsize</span>} in the given <span class="parameter">base</span> to limbs at <span class="parameter">rp</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fb2d29b4-f7e2-e3d6-6fcb-920f2e86c0d7.htm">mpn_sizeinbase</a></td><td><div class="summary">
            Return the size of {<span class="parameter">xp</span>, <span class="parameter">n</span>} measured in number of digits in the given <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ff9c2930-ded2-c5b6-46dd-3ff9279cdc5e.htm">mpn_sqr</a></td><td><div class="summary">
            Compute the square of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and write the (2 * <span class="parameter">n</span>)-limb result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ee31871c-38bd-fccc-77f5-e76909dd7a79.htm">mpn_sqrtrem</a></td><td><div class="summary">
            Compute the square root of {<span class="parameter">sp</span>, <span class="parameter">n</span>} and put the result at {<span class="parameter">r1p</span>, ceil(<span class="parameter">n</span> / 2)} and the remainder at {<span class="parameter">r2p</span>, retval}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="87681f32-b766-3ce2-7c08-98b2d32cb5fa.htm">mpn_sub</a></td><td><div class="summary">
            Subtract {<span class="parameter">s2p</span>, <span class="parameter">s2n</span>} from {<span class="parameter">s1p</span>, <span class="parameter">s1n</span>}, and write the <span class="parameter">s1n</span> least significant limbs of the result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ae3c6cf7-08a0-54dd-951f-b2fe2112b8b0.htm">mpn_sub_1</a></td><td><div class="summary">
            Subtract <span class="parameter">s2limb</span> from {<span class="parameter">s1p</span>, <span class="parameter">n</span>}, and write the <span class="parameter">n</span> least significant limbs of the result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b104184e-cf49-dbdb-764a-9dee5cf7b2fd.htm">mpn_sub_n</a></td><td><div class="summary">
            Subtract {<span class="parameter">s2p</span>, <span class="parameter">n</span>} from {<span class="parameter">s1p</span>, <span class="parameter">n</span>}, and write the <span class="parameter">n</span> least significant limbs of the result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="95e10fea-31c2-e900-c5b0-f48636e1d76e.htm">mpn_submul_1</a></td><td><div class="summary">
            Multiply {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and <span class="parameter">s2limb</span>, and subtract the <span class="parameter">n</span> least significant limbs of the product from {<span class="parameter">rp</span>, <span class="parameter">n</span>} and write the result to <span class="parameter">rp</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9fe90631-f519-1cf3-5a20-701d2bae1d0d.htm">mpn_tdiv_qr</a></td><td><div class="summary">
            Divide {<span class="parameter">np</span>, <span class="parameter">nn</span>} by {<span class="parameter">dp</span>, <span class="parameter">dn</span>} and put the quotient at {<span class="parameter">qp</span>, <span class="parameter">nn</span> - <span class="parameter">dn</span> + 1} and the remainder at {<span class="parameter">rp</span>, <span class="parameter">dn</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="25d623c3-ee22-4b83-1161-3f98ce698012.htm">mpn_xnor_n</a></td><td><div class="summary">
            Perform the bitwise logical exclusive or of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the bitwise complement of the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0f01fecd-9200-982d-c331-c213f3b960a1.htm">mpn_xor_n</a></td><td><div class="summary">
            Perform the bitwise logical exclusive or of {<span class="parameter">s1p</span>, <span class="parameter">n</span>} and {<span class="parameter">s2p</span>, <span class="parameter">n</span>}, and write the result to {<span class="parameter">rp</span>, <span class="parameter">n</span>}. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="90a57214-6596-be63-31e7-aa3186252628.htm">mpn_zero</a></td><td><div class="summary">
            Zero {<span class="parameter">rp</span>, <span class="parameter">n</span>}.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2e469258-d5e3-da86-aebe-025b92d7cf73.htm">mpn_zero_p</a></td><td><div class="summary">
            Test {<span class="parameter">sp</span>, <span class="parameter">n</span>} and return 1 if the operand is zero, 0 otherwise.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1f2250c3-a1b8-db12-19e4-9946e39eb64c.htm">mpq_abs</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the absolute value of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ca6a2024-43ea-fb4e-245e-12e2e01e4ebd.htm">mpq_add</a></td><td><div class="summary">
            Set <span class="parameter">sum</span> to <span class="parameter">addend1</span> + <span class="parameter">addend2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="19d53697-65f1-2df5-62f3-988182af0c88.htm">mpq_canonicalize</a></td><td><div class="summary">
            Remove any factors that are common to the numerator and denominator of <span class="parameter">op</span>, and make the denominator positive.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b69da354-160b-602a-4cc4-faf7ca423186.htm">mpq_clear</a></td><td><div class="summary">
            Free the space occupied by <span class="parameter">x</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="cc2693e9-1cc5-3098-f2f7-bb05c8017f62.htm">mpq_clears</a></td><td><div class="summary">
            Free the space occupied by a NULL-terminated list of <a href="635f1879-5f85-881e-cca8-3222baf5045a.htm">mpq_t</a> variables. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3f29d5f4-13ae-cec8-ea75-6a76d00d10fc.htm">mpq_cmp</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="43cb2c87-9fab-eb9d-2f7a-140d72af7b15.htm">mpq_cmp_si</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">num2</span> / <span class="parameter">den2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="03336561-2bb9-b38f-8adb-506e0fad094b.htm">mpq_cmp_ui</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">num2</span> / <span class="parameter">den2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bc33b7de-0deb-669e-0bb7-6cd1090f4aea.htm">mpq_cmp_z</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2d93abcb-e73f-fe40-a50b-395a0bf6a4fc.htm">mpq_denref</a></td><td><div class="summary">
            Return a reference to the denominator <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="433b0777-4514-5b20-7494-f0f2746fe8e5.htm">mpq_div</a></td><td><div class="summary">
            Set <span class="parameter">quotient</span> to <span class="parameter">dividend</span> / <span class="parameter">divisor</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8dc5397d-96e4-74dd-cd31-0d05649ea927.htm">mpq_div_2exp</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> / 2^<span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7828ce92-079b-da4d-aab2-1742209287fb.htm">mpq_equal</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op1</span> and <span class="parameter">op2</span> are equal, zero if they are non-equal. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f88b40d4-3da9-e2c7-4c4c-1ad868778075.htm">mpq_get_d</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">double</a>, truncating if necessary (i.e. rounding towards zero). 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ae9e468d-e9ce-db55-1964-433829dfa476.htm">mpq_get_den</a></td><td><div class="summary">
            Set <span class="parameter">denominator</span> to the denominator of <span class="parameter">rational</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4f98333c-76a2-db46-cbba-97785a449450.htm">mpq_get_num</a></td><td><div class="summary">
            Set <span class="parameter">numerator</span> to the numerator of <span class="parameter">rational</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f457878b-c3f5-bfe2-aaa9-7f2179332f57.htm">mpq_get_str</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="dbf3d252-fd6d-455f-2ba7-4091845b86a7.htm">mpq_init</a></td><td><div class="summary">
            Initialize <span class="parameter">x</span> and set it to 0/1.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8ab8ea40-9723-f0c8-18f4-9558c73397b9.htm">mpq_inits</a></td><td><div class="summary">
            Initialize a NULL-terminated list of <a href="635f1879-5f85-881e-cca8-3222baf5045a.htm">mpq_t</a> variables, and set their values to 0/1. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="38d3a9de-bae7-3f44-18e0-38fe450d4cba.htm">mpq_inp_str</a></td><td><div class="summary">
            Read a string of digits from <span class="parameter">stream</span> and convert them to a rational in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3b01109c-5b01-16d2-edd0-5ac3d5514930.htm">mpq_inv</a></td><td><div class="summary">
            Set <span class="parameter">inverted_number</span> to 1 / <span class="parameter">number</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="584834ae-b1f7-d965-2586-f88d5c9b4f67.htm">mpq_mul</a></td><td><div class="summary">
            Set <span class="parameter">product</span> to <span class="parameter">multiplier</span> * <span class="parameter">multiplicand</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f148f8be-dfbc-fc41-981d-0a99834f01ff.htm">mpq_mul_2exp</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * 2*<span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b6bd5187-99bb-c6b5-d871-b163fa0f7e0e.htm">mpq_neg</a></td><td><div class="summary">
            Set <span class="parameter">negated_operand</span> to -<span class="parameter">operand</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a4c2958c-5957-d736-6883-ce7e76b3d7a4.htm">mpq_numref</a></td><td><div class="summary">
            Return a reference to the numerator <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e1c059c4-4cd9-9a2b-1178-4b1a60354129.htm">mpq_out_str</a></td><td><div class="summary">
            Output <span class="parameter">op</span> on stdio stream <span class="parameter">stream</span>, as a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9eac8ea9-0821-09b2-8091-e6638c562c7f.htm">mpq_set</a></td><td><div class="summary">
            Assign <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1a7c5874-9132-2c43-e407-df1eead74fab.htm">mpq_set_d</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the value of <span class="parameter">op</span>. There is no rounding, this conversion is exact. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="52388f4c-575a-9b13-41a6-e7ec2bd0becd.htm">mpq_set_den</a></td><td><div class="summary">
            Set the denominator of <span class="parameter">rational</span> to <span class="parameter">denominator</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f5dc74ec-155b-2a14-3eb5-4610a8509bae.htm">mpq_set_f</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the value of <span class="parameter">op</span>. There is no rounding, this conversion is exact. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6885ad71-c185-1e0c-abc8-4320e12f377a.htm">mpq_set_num</a></td><td><div class="summary">
            Set the numerator of <span class="parameter">rational</span> to <span class="parameter">numerator</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ba898f37-20d0-a5cd-eff1-0663f18220dd.htm">mpq_set_si</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> to <span class="parameter">op1</span> / <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e98ec3cf-b539-8024-c401-ecd24bd43662.htm">mpq_set_str</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> from a null-terminated string <span class="parameter">str</span> in the given <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="915a7958-6821-bb64-468f-b0b48b351878.htm">mpq_set_ui</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> to <span class="parameter">op1</span> / <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="84d256a1-cd11-3bf9-3e8c-8a7e1980315d.htm">mpq_set_z</a></td><td><div class="summary">
            Assign <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1176cc4e-ffda-2993-1a4a-2e0c7ed24adb.htm">mpq_sgn</a></td><td><div class="summary">
            Return +1 if <span class="parameter">op</span> &gt; 0, 0 if <span class="parameter">op</span> = 0, and -1 if <span class="parameter">op</span> &lt; 0. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e7d65cf6-2ee4-c983-62b5-4ad66f1d8599.htm">mpq_sub</a></td><td><div class="summary">
            Set <span class="parameter">difference</span> to <span class="parameter">minuend</span> - <span class="parameter">subtrahend</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="11e36fbc-ffc4-46df-50b7-2b07684c1755.htm">mpq_swap</a></td><td><div class="summary">
            Swap the values <span class="parameter">rop1</span> and <span class="parameter">rop2</span> efficiently. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d479f2da-ecf9-c9d6-5cc7-66eb8b5ba16b.htm">mpz_2fac_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the double-factorial <span class="parameter">n</span>!!.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9761cc8e-6099-7a76-5ea6-d27f617fd5d1.htm">mpz_abs</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the absolute value of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="acb6d3d4-70ad-58be-7cb8-9edb997204b3.htm">mpz_add</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> + <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7327aa92-1ab5-7553-7eee-7b5e3e61322a.htm">mpz_add_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> + <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="582a0647-1482-ecd7-cc78-bd2222610e06.htm">mpz_addmul</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">rop</span> + <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4e93c4c4-d799-2828-5285-8a3f3ed02ad3.htm">mpz_addmul_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">rop</span> + <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3e5268ed-796b-2880-93a3-8d17143f99b1.htm">mpz_and</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> bitwise-and <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="cbbdf666-7c6c-f3f3-1790-b5bb1655af87.htm">mpz_bin_ui</a></td><td><div class="summary">
            Compute the binomial coefficient <span class="parameter">n</span> over <span class="parameter">k</span> and store the result in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="402dc8d2-32bd-59ad-80f3-4bd2cc000b0d.htm">mpz_bin_uiui</a></td><td><div class="summary">
            Compute the binomial coefficient <span class="parameter">n</span> over <span class="parameter">k</span> and store the result in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8b1e9c27-7278-6032-80c0-015b93258d96.htm">mpz_cdiv_q</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a4def6d8-f8a5-f76f-4ef0-3e6e7eec23fb.htm">mpz_cdiv_q_2exp</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to ceiling(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="05b3707d-5f48-4d76-c42a-566f3179d7f8.htm">mpz_cdiv_q_ui</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>), and return the remainder r = | <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7f89c102-d1eb-2dab-0e6e-061893309c4b.htm">mpz_cdiv_qr</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>), and set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7aee9fae-9d14-72be-6d0f-0f9c4a863fe5.htm">mpz_cdiv_qr_ui</a></td><td><div class="summary">
            Set quotient <span class="parameter">q</span> to ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>), set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>, and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e8f34851-d0b2-335e-1ea5-f9129062aabf.htm">mpz_cdiv_r</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8320e5d8-1df9-ca26-3054-e4b93cc0f616.htm">mpz_cdiv_r_2exp</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * 2^<span class="parameter">b</span> where q = ceiling(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="af797947-8f84-320e-d1cd-ba578b26cef3.htm">mpz_cdiv_r_ui</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>), and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="290eb509-85df-a0cc-86f8-ac4e6f5d730a.htm">mpz_cdiv_ui</a></td><td><div class="summary">
            Return the remainder | r | where r = <span class="parameter">n</span> - q * <span class="parameter">d</span>, and where q = ceiling(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="551f8670-3080-9a92-cd50-58d09cbf77ef.htm">mpz_clear</a></td><td><div class="summary">
            Free the space occupied by <span class="parameter">x</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a909faa8-4939-1ba3-5647-af8836c9a291.htm">mpz_clears</a></td><td><div class="summary">
            Free the space occupied by a NULL-terminated list of <a href="8beda7fb-bbc4-b56f-fd1f-1459377ecb3b.htm">mpz_t</a> variables.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8812c658-675a-b564-9159-2383971747b1.htm">mpz_clrbit</a></td><td><div class="summary">
            Clear bit <span class="parameter">bit_index</span> in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="eea958f4-5951-38f2-05ba-3870cefb3842.htm">mpz_cmp</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bb37470f-5f40-4f6d-01d9-4e40446782a3.htm">mpz_cmp_d</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2e55f6fd-0083-fc85-0d42-65e472376dbe.htm">mpz_cmp_si</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="bfe022c5-95d3-45d7-0c6f-97167a9a0af2.htm">mpz_cmp_ui</a></td><td><div class="summary">
            Compare <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3e06d348-8a15-691d-5889-ab3f1a4c9f73.htm">mpz_cmpabs</a></td><td><div class="summary">
            Compare the absolute values of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="011efd01-e7f0-47d8-7d1e-77888d96f0d4.htm">mpz_cmpabs_d</a></td><td><div class="summary">
            Compare the absolute values of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="05f897c4-77dc-7735-81ca-65650f61d961.htm">mpz_cmpabs_ui</a></td><td><div class="summary">
            Compare the absolute values of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="635ddf01-9c52-0d37-202e-c560b895fb7d.htm">mpz_com</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the one’s complement of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4a959468-7670-9303-a5e7-3f1de8f17a62.htm">mpz_combit</a></td><td><div class="summary">
            Complement bit <span class="parameter">bit_index</span> in <span class="parameter">rop</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4b6a07f8-2a61-d1a3-7192-f2907292bf2a.htm">mpz_congruent_2exp_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is congruent to <span class="parameter">c</span> modulo 2^<span class="parameter">b</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2ff1eb0a-f399-2ad2-f7d1-3fb51dceac10.htm">mpz_congruent_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is congruent to <span class="parameter">c</span> modulo <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3eae225a-8db3-3b14-d862-03718f3a5548.htm">mpz_congruent_ui_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is congruent to <span class="parameter">c</span> modulo <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2ddc32dc-4ee3-18e9-dd3d-7e64c3304e1e.htm">mpz_divexact</a></td><td><div class="summary">
            Set <span class="parameter">q</span> to <span class="parameter">n</span> / <span class="parameter">d</span> when it is known in advance that <span class="parameter">d</span> divides <span class="parameter">n</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3ddee65c-a067-79a3-968d-31f3d585db3b.htm">mpz_divexact_ui</a></td><td><div class="summary">
            Set <span class="parameter">q</span> to <span class="parameter">n</span> / <span class="parameter">d</span> when it is known in advance that <span class="parameter">d</span> divides <span class="parameter">n</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4f821e78-facb-4ea2-ab21-62d1f5049e68.htm">mpz_divisible_2exp_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is exactly divisible by 2^<span class="parameter">b</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4bafc7fe-d2a8-7cf2-b9b8-c296550b4ef2.htm">mpz_divisible_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is exactly divisible by <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6c026976-a6c9-6f12-6b31-c113166ea236.htm">mpz_divisible_ui_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">n</span> is exactly divisible by <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e6012778-c71b-b078-2ef3-9f9db90f1769.htm">mpz_even_p</a></td><td><div class="summary">
            Determine whether <span class="parameter">op</span> is even.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="95c2ec1a-18ef-5081-f614-ccb6047a2b52.htm">mpz_export(void_ptr, ptr<span id="LST46929034_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_10?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>size_t<span id="LST46929034_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_11?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32, size_t, Int32, size_t, mpz_t)</a></td><td><div class="summary">
            Fill <span class="parameter">rop</span> with word data from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c9d371c8-8c16-77a3-2c47-8edae05276c5.htm">mpz_export(void_ptr, size_t<span id="LST46929034_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST46929034_12?cpp=%");</script>, Int32, size_t, Int32, size_t, mpz_t)</a></td><td><div class="summary">
            Fill <span class="parameter">rop</span> with word data from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="17280f99-d0dc-6714-12c7-be17c97c0cdb.htm">mpz_fac_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the factorial <span class="parameter">n</span>!.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b0d00a52-e539-c5f7-7d6d-ab202e72ad98.htm">mpz_fdiv_q</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to floor(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f56c5489-8c01-a687-fec8-a5f443738701.htm">mpz_fdiv_q_2exp</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to floor(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0dcf05e1-ec39-5294-c4d0-d8e0f92642e4.htm">mpz_fdiv_q_ui</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to floor(<span class="parameter">n</span> / <span class="parameter">d</span>), and return the remainder r = | <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d9ab5220-69aa-8e5d-8d15-375eb27149ad.htm">mpz_fdiv_qr</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to floor(<span class="parameter">n</span> / <span class="parameter">d</span>), and set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="452a9316-f421-a65c-a9ba-254b201dc431.htm">mpz_fdiv_qr_ui</a></td><td><div class="summary">
            Set quotient <span class="parameter">q</span> to floor(<span class="parameter">n</span> / <span class="parameter">d</span>), set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>, and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5dfc0ea9-a81f-bda9-356c-034395ba3c9c.htm">mpz_fdiv_r</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = floor(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b0f120a7-a215-fbff-1138-bac5df8d741c.htm">mpz_fdiv_r_2exp</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * 2^<span class="parameter">b</span> where q = floor(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="772064e8-3ec1-840e-c79c-78f478321b6c.htm">mpz_fdiv_r_ui</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = floor(<span class="parameter">n</span> / <span class="parameter">d</span>), and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8435af1d-e5e4-3e55-1024-449ff7b56ad4.htm">mpz_fdiv_ui</a></td><td><div class="summary">
            Return the remainder | r | where r = <span class="parameter">n</span> - q * <span class="parameter">d</span>, and where q = floor(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="71884691-07d0-7bdf-c761-df9b07723735.htm">mpz_fib_ui</a></td><td><div class="summary">
            Sets <span class="parameter">fn</span> to to F[<span class="parameter">n</span>], the <span class="parameter">n</span>’th Fibonacci number. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c0f8ab02-55db-8a6b-705d-6fa700d54545.htm">mpz_fib2_ui</a></td><td><div class="summary">
            Sets <span class="parameter">fn</span> to F[<span class="parameter">n</span>], and <span class="parameter">fnsub1</span> to F[<span class="parameter">n</span> - 1]. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a066df5a-c312-3b00-6092-6f914c3ee248.htm">mpz_fits_sint_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in a signed 32-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="cad028df-c3f1-12b6-d8dd-56c4968730e4.htm">mpz_fits_slong_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in a signed 32-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e07f3328-a28c-c75c-10a6-f21d05e6aec0.htm">mpz_fits_sshort_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in a signed 16-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3ce0cc26-e888-90f8-a517-aad88332eec0.htm">mpz_fits_uint_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in an unsigned 32-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fb9e7caf-b049-7884-b70c-185053972604.htm">mpz_fits_ulong_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in an unsigned 32-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6b85c6a3-d6c5-d1d2-829a-af000bae687e.htm">mpz_fits_ushort_p</a></td><td><div class="summary">
            Return non-zero iff the value of <span class="parameter">op</span> fits in an unsigned 16-bit integer. Otherwise, return zero.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4e14cfc4-6f8b-14f7-74df-2f4415ce6f1c.htm">mpz_gcd</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the greatest common divisor of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="88b8d333-9c9c-de7d-8131-6d1432c14a0c.htm">mpz_gcd_ui</a></td><td><div class="summary">
            Compute the greatest common divisor of <span class="parameter">op1</span> and <span class="parameter">op2</span>. If <span class="parameter">rop</span> is not null, store the result there. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fae08c47-86df-9010-1827-a9fa6e48a1af.htm">mpz_gcdext</a></td><td><div class="summary">
            Set <span class="parameter">g</span> to the greatest common divisor of <span class="parameter">a</span> and <span class="parameter">b</span>, and in addition set <span class="parameter">s</span> and <span class="parameter">t</span> to coefficients satisfying <span class="parameter">a</span> * <span class="parameter">s</span> + <span class="parameter">b</span> * <span class="parameter">t</span> = <span class="parameter">g</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="89d8c501-6c12-9104-7e2d-be411f443b62.htm">mpz_get_d</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a double, truncating if necessary (i.e. rounding towards zero).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="74e22b4c-fa79-f5f9-b752-da41bd427f37.htm">mpz_get_d_2exp</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a double, truncating if necessary (i.e. rounding towards zero), and returning the exponent separately.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="da585eac-be2c-38ea-8be5-90c5be95ae86.htm">mpz_get_si</a></td><td><div class="summary">
            Return the value of <span class="parameter">op</span> as an signed long.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="54c1f778-6fc8-0056-6f25-26f6754645fb.htm">mpz_get_str</a></td><td><div class="summary">
            Convert <span class="parameter">op</span> to a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3a92eddc-59f3-b42f-9921-4e1cc5700d60.htm">mpz_get_ui</a></td><td><div class="summary">
            Return the value of <span class="parameter">op</span> as an unsigned long.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1dfbf5da-f4c2-bbab-5708-3b31d40e4f16.htm">mpz_getlimbn</a></td><td><div class="summary">
            Return limb number <span class="parameter">n</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4dfb8bd5-8a6f-6919-7aa9-8c060d42b5d7.htm">mpz_hamdist</a></td><td><div class="summary">
            Return the hamming distance between the two operands.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8c8c1e55-275f-cff8-2152-883a4eaa163c.htm">mpz_import</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> from an array of word data at <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="dc2f13ec-ac21-1196-0a1d-c574578b1f24.htm">mpz_init</a></td><td><div class="summary">
            Initialize <span class="parameter">x</span>, and set its value to 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2c37941c-dee7-0d74-7889-3fa6c20bab6a.htm">mpz_init_set</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> with limb space and set the initial numeric value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fec3a449-96b9-64b0-f53d-0b5a3856d02d.htm">mpz_init_set_d</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> with limb space and set the initial numeric value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9cbc8594-a202-86fd-f4e8-22635ba952b5.htm">mpz_init_set_si</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> with limb space and set the initial numeric value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d5af3442-ab5b-08e2-9398-0b6f04506c16.htm">mpz_init_set_str</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> and set its value like <a href="6a3819df-abc1-ceb1-a5c7-87a879977b8c.htm">mpz_set_str</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7da3b40f-ae2c-63c5-0157-9b51d54cf6cb.htm">mpz_init_set_ui</a></td><td><div class="summary">
            Initialize <span class="parameter">rop</span> with limb space and set the initial numeric value from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5cd3a242-93b7-49c5-b9c9-1dca02ed4662.htm">mpz_init2</a></td><td><div class="summary">
            Initialize <span class="parameter">x</span>, with space for <span class="parameter">n</span>-bit numbers, and set its value to 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="de0b7cf7-1826-55f3-379d-41a6ef2d0991.htm">mpz_inits</a></td><td><div class="summary">
            Initialize a NULL-terminated list of <a href="8beda7fb-bbc4-b56f-fd1f-1459377ecb3b.htm">mpz_t</a> variables, and set their values to 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="44097b06-123a-4c00-b17f-ab0c70ad78bb.htm">mpz_inp_raw</a></td><td><div class="summary">
            Input from stdio stream <span class="parameter">stream</span> in the format written by <a href="053b54b6-f646-f0aa-ddaf-00c494a6d5ef.htm">mpz_out_raw</a>, and put the result in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8b8d6ec1-3ae5-e6f3-f030-289abe5002d0.htm">mpz_inp_str</a></td><td><div class="summary">
            Input a possibly white-space preceded string in base <span class="parameter">base</span> from stdio stream <span class="parameter">stream</span>, and put the read integer in <span class="parameter">rop</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e3072efb-05a9-947c-5532-6d806c157e4a.htm">mpz_invert</a></td><td><div class="summary">
            Compute the inverse of <span class="parameter">op1</span> modulo <span class="parameter">op2</span> and put the result in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0ccb1bab-4817-1062-242d-41c181cacf77.htm">mpz_ior</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> bitwise inclusive-or <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="38be0c24-42ac-e0ea-9e18-e75e3bda2a1e.htm">mpz_jacobi</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="54ba330f-67d3-fa30-2d5f-0480b7f4659c.htm">mpz_kronecker</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>) with the Kronecker extension (<span class="parameter">a</span>/2) = (2/<span class="parameter">a</span>) when <span class="parameter">a</span> odd, or (<span class="parameter">a</span>/2) = 0 when <span class="parameter">a</span> even. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0252e04b-b8fc-5a06-e1e2-a0cafbb44296.htm">mpz_kronecker_si</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>) with the Kronecker extension (<span class="parameter">a</span>/2) = (2/<span class="parameter">a</span>) when <span class="parameter">a</span> odd, or (<span class="parameter">a</span>/2) = 0 when <span class="parameter">a</span> even. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="07613c31-7d00-9806-1676-55f8c5a997f8.htm">mpz_kronecker_ui</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>) with the Kronecker extension (<span class="parameter">a</span>/2) = (2/<span class="parameter">a</span>) when <span class="parameter">a</span> odd, or (<span class="parameter">a</span>/2) = 0 when <span class="parameter">a</span> even. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="db614763-a13e-6456-d52b-9f567be7e776.htm">mpz_lcm</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the least common multiple of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f60dbcbd-d4f0-edcc-8f88-2de1aa375e6b.htm">mpz_lcm_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the least common multiple of <span class="parameter">op1</span> and <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b5936979-01aa-1cd8-20de-d6386368e234.htm">mpz_legendre</a></td><td><div class="summary">
            Calculate the Legendre symbol (<span class="parameter">a</span>/<span class="parameter">p</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="398e3eb8-0f55-086f-a765-0a8b3c9307e0.htm">mpz_limbs_finish</a></td><td><div class="summary">
            Updates the internal size field of <span class="parameter">x</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="87f5432d-aacb-57b6-b4a7-e4dc803684a4.htm">mpz_limbs_modify</a></td><td><div class="summary">
            Return a pointer to the limb array of <span class="parameter">x</span>, intended for write access.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4b08344c-f506-a717-4e1d-112cd19f5286.htm">mpz_limbs_read</a></td><td><div class="summary">
            Return a pointer to the limb array representing the absolute value of <span class="parameter">x</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="86ddbf69-57f6-af58-bd13-3eca06123b29.htm">mpz_limbs_write</a></td><td><div class="summary">
            Return a pointer to the limb array of <span class="parameter">x</span>, intended for write access.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a48d50bf-0432-7feb-cc41-d6bf70f78e58.htm">mpz_lucnum_ui</a></td><td><div class="summary">
            Sets <span class="parameter">ln</span> to to L[<span class="parameter">n</span>], the <span class="parameter">n</span>’th Lucas number. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="0cdaca8f-816e-8c22-f46b-fcf58e9e91d4.htm">mpz_lucnum2_ui</a></td><td><div class="summary">
            Sets <span class="parameter">ln</span> to L[<span class="parameter">n</span>], and <span class="parameter">lnsub1</span> to L[<span class="parameter">n</span> - 1]. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="b4ff3a9e-3ab5-689f-7a80-b61dad2ea125.htm">mpz_mfac_uiui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the m-multi-factorial <span class="parameter">n</span>!^(<span class="parameter">m</span>)n.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f0bda1a7-4b40-0896-4939-4dc66b256424.htm">mpz_millerrabin</a></td><td><div class="summary">
            An implementation of the probabilistic primality test found in Knuth's Seminumerical Algorithms book.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8d141ae9-4a01-bdc9-caf3-8daba3321ac1.htm">mpz_mod</a></td><td><div class="summary">
            Set <span class="parameter">r</span> to <span class="parameter">n</span> mod <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="86fd57d1-ccfa-804e-760b-bd8e7ade2176.htm">mpz_mod_ui</a></td><td><div class="summary">
            Set <span class="parameter">r</span> to <span class="parameter">n</span> mod <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3523bf0e-75ec-6286-76a0-4685198e51f6.htm">mpz_mul</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="18cd39f5-7c88-f557-3803-8a4a321cfb97.htm">mpz_mul_2exp</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * 2^<span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ffd27ee1-e1e3-567f-b3cf-87dec2de2c83.htm">mpz_mul_si</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5fba9944-4437-9b1c-afa0-666d87eafe39.htm">mpz_mul_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5a61d62c-a0f0-5e86-b6dd-8ca6414b35ed.htm">mpz_neg</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to -<span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="88f2d84b-105b-f882-ac55-54a2b6aea39d.htm">mpz_nextprime</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the next prime greater than <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6820d6c4-6ee1-53d7-7223-3f654a496ce4.htm">mpz_odd_p</a></td><td><div class="summary">
            Determine whether <span class="parameter">op</span> is odd.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="053b54b6-f646-f0aa-ddaf-00c494a6d5ef.htm">mpz_out_raw</a></td><td><div class="summary">
            Output <span class="parameter">op</span> on stdio stream <span class="parameter">stream</span>, in raw binary format.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6f85986d-b6a0-435d-3675-c025ef70413d.htm">mpz_out_str</a></td><td><div class="summary">
            Output <span class="parameter">op</span> on stdio stream <span class="parameter">stream</span>, as a string of digits in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d7722641-e3ea-336d-63f3-dc48f786e376.htm">mpz_perfect_power_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> is a perfect power, i.e., if there exist integers a and b, with b &gt; 1, such that <span class="parameter">op</span> = a^b. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="260d6edf-ce02-26f7-d704-ad0d11604e61.htm">mpz_perfect_square_p</a></td><td><div class="summary">
            Return non-zero if <span class="parameter">op</span> is a perfect square, i.e., if the square root of <span class="parameter">op</span> is an integer.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="84bf95e4-d9d0-4ffe-f836-3650342de962.htm">mpz_popcount</a></td><td><div class="summary">
            Return the population count of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8e3a525d-9371-fb32-1051-e8e8fe23a63d.htm">mpz_pow_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">base</span>^<span class="parameter">exp</span>. The case 0^0 yields 1. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9de702f4-758b-2a4e-1025-ed5e46cc7db2.htm">mpz_powm</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to (<span class="parameter">base</span>^<span class="parameter">exp</span>) modulo <span class="parameter">mod</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="93210ab6-2523-3130-044a-80bcf43c181d.htm">mpz_powm_sec</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to (<span class="parameter">base</span>^<span class="parameter">exp</span>) modulo <span class="parameter">mod</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9fd28088-e353-2b5e-03e3-9c2763226ed6.htm">mpz_powm_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to (<span class="parameter">base</span>^<span class="parameter">exp</span>) modulo <span class="parameter">mod</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="985a65cd-9a65-e8b3-580b-626b65662dd6.htm">mpz_primorial_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the primorial of <span class="parameter">n</span>, i.e. the product of all positive prime numbers ≤ <span class="parameter">n</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="52ce0428-7c09-f2b9-f517-d3d02521f365.htm">mpz_probab_prime_p</a></td><td><div class="summary">
            Determine whether <span class="parameter">n</span> is prime.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="2b0da39e-331c-878e-26c7-bd6d81c7f8e0.htm">mpz_random</a></td><td><div class="summary">
            Generate a random integer of at most <span class="parameter">max_size</span> limbs.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="cd88d27d-fb03-9e74-e353-4f0df7a38a96.htm">mpz_random2</a></td><td><div class="summary">
            Generate a random integer of at most <span class="parameter">max_size</span> limbs, with long strings of zeros and ones in the binary representation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1de9b70a-1d21-8168-e41c-1c259f64091a.htm">mpz_realloc2</a></td><td><div class="summary">
            Change the space allocated for <span class="parameter">x</span> to <span class="parameter">n</span> bits.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d6721058-8a6f-9b20-2a5f-8ffd83cc2a2e.htm">mpz_remove</a></td><td><div class="summary">
            Remove all occurrences of the factor <span class="parameter">f</span> from <span class="parameter">op</span> and store the result in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="5786e0c6-2dde-406f-b86d-3df6757c80c0.htm">mpz_roinit_n</a></td><td><div class="summary">
            Special initialization of <span class="parameter">x</span>, using the given limb array and size.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="279877e1-b8d0-f52c-16ba-b2e38e671437.htm">mpz_root</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the truncated integer part of the <span class="parameter">n</span>th root of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a637ce7e-54d7-eba9-0c6f-c237f115b621.htm">mpz_rootrem</a></td><td><div class="summary">
            Set <span class="parameter">root</span> to the truncated integer part of the <span class="parameter">n</span>th root of <span class="parameter">u</span>. Set <span class="parameter">rem</span> to the remainder, <span class="parameter">u</span> - <span class="parameter">root</span>^<span class="parameter">n</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4be917d3-47c6-cb58-d768-6276e78f0afb.htm">mpz_rrandomb</a></td><td><div class="summary">
            Generate a random integer with long strings of zeros and ones in the binary representation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3e36be2b-14ed-eb7b-0546-af6d49e983fa.htm">mpz_scan0</a></td><td><div class="summary">
            Scan <span class="parameter">op</span> for 0 bit.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="480d1d15-b561-ac8f-b12a-f27ba075b3f2.htm">mpz_scan1</a></td><td><div class="summary">
            Scan <span class="parameter">op</span> for 1 bit.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3a4e6141-0771-f9ac-2283-5e9348f86d4a.htm">mpz_set</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8d6c39e2-22d8-d0ef-219c-dc594e73b2c5.htm">mpz_set_d</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9005bf40-4373-e879-9f0a-448b174aad67.htm">mpz_set_f</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f6eeca07-edf7-6915-36e4-e8a7a62333d7.htm">mpz_set_q</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1ffac718-d814-0556-ea54-dbf1d676e0cc.htm">mpz_set_si</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6a3819df-abc1-ceb1-a5c7-87a879977b8c.htm">mpz_set_str</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">str</span>, a null-terminated C string in base <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7daadb71-9f36-2848-86c4-ba1fba25fcfd.htm">mpz_set_ui</a></td><td><div class="summary">
            Set the value of <span class="parameter">rop</span> from <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f0caf821-320b-1a8b-87ff-84fcbdfd5801.htm">mpz_setbit</a></td><td><div class="summary">
            Set bit <span class="parameter">bit_index</span> in <span class="parameter">rop</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="86b2033c-26c3-3889-9025-b2a638910a86.htm">mpz_sgn</a></td><td><div class="summary">
            Return +1 if <span class="parameter">op</span> &gt; 0, 0 if <span class="parameter">op</span> = 0, and -1 if <span class="parameter">op</span> &lt; 0.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a248732b-c4be-7e9a-4207-0049371764ff.htm">mpz_si_kronecker</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>) with the Kronecker extension (<span class="parameter">a</span>/2) = (2/<span class="parameter">a</span>) when <span class="parameter">a</span> odd, or (<span class="parameter">a</span>/2) = 0 when <span class="parameter">a</span> even. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="9a169dd9-42b0-ea59-abbe-4efc6b870c75.htm">mpz_size</a></td><td><div class="summary">
             Return the size of <span class="parameter">op</span> measured in number of limbs.
             </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="7dfe367e-74d3-e782-860b-2314da9c44cf.htm">mpz_sizeinbase</a></td><td><div class="summary">
            Return the size of <span class="parameter">op</span> measured in number of digits in the given <span class="parameter">base</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="1e1204c7-2d33-c9d1-4f4e-c36215f5ebed.htm">mpz_sqrt</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to the truncated integer part of the square root of <span class="parameter">op</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e802af92-73bf-b138-dc95-a3c57eeefb66.htm">mpz_sqrtrem</a></td><td><div class="summary">
            Set <span class="parameter">rop1</span> to the truncated integer part of the square root of <span class="parameter">op</span>, like <a href="1e1204c7-2d33-c9d1-4f4e-c36215f5ebed.htm">mpz_sqrt</a>. Set <span class="parameter">rop2</span> to the remainder <span class="parameter">op</span> - <span class="parameter">rop1</span> * <span class="parameter">rop1</span>, which will be zero if <span class="parameter">op</span> is a perfect square.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="53702772-53e9-ec51-c3a5-7a1912b4f2b4.htm">mpz_sub</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="e3e3f2ce-f3d8-5321-37a5-de65b6c2a30d.htm">mpz_sub_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="ce7d559a-3772-41c0-912f-9ab218f4d98c.htm">mpz_submul</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">rop</span> - <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c5a0fa06-536c-6c6f-20c7-fb014ebc6444.htm">mpz_submul_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">rop</span> - <span class="parameter">op1</span> * <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="90eada10-67d0-8376-0010-d053e5043b96.htm">mpz_swap</a></td><td><div class="summary">
            Swap the values <span class="parameter">rop1</span> and <span class="parameter">rop2</span> efficiently.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="4c830876-cdf6-9d94-1ceb-24d30f873bc2.htm">mpz_tdiv_q</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to trunc(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="746301ec-352c-9bae-ff92-8a2ed31be655.htm">mpz_tdiv_q_2exp</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to trunc(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="67fc54a2-05e7-bc3c-64f4-8c6de48fa6b6.htm">mpz_tdiv_q_ui</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to trunc(<span class="parameter">n</span> / <span class="parameter">d</span>), and return the remainder r = | <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="387ec1dd-15b3-4cc9-862a-e3f0a8e2cb78.htm">mpz_tdiv_qr</a></td><td><div class="summary">
            Set the quotient <span class="parameter">q</span> to trunc(<span class="parameter">n</span> / <span class="parameter">d</span>), and set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d5b95352-7b5e-881b-136a-b78fd8e033ff.htm">mpz_tdiv_qr_ui</a></td><td><div class="summary">
            Set quotient <span class="parameter">q</span> to trunc(<span class="parameter">n</span> / <span class="parameter">d</span>), set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - <span class="parameter">q</span> * <span class="parameter">d</span>, and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="beb982a6-fa8e-6a0f-409a-bce1fddb6002.htm">mpz_tdiv_r</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = trunc(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c8216c67-1e74-82d0-6ca0-f24d07045ca8.htm">mpz_tdiv_r_2exp</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * 2^<span class="parameter">b</span> where q = trunc(<span class="parameter">n</span> / 2^<span class="parameter">b</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="a58b3e42-f5e9-42d3-e71a-2a6f68dec3a9.htm">mpz_tdiv_r_ui</a></td><td><div class="summary">
            Set the remainder <span class="parameter">r</span> to <span class="parameter">n</span> - q * <span class="parameter">d</span> where q = trunc(<span class="parameter">n</span> / <span class="parameter">d</span>), and return | <span class="parameter">r</span> |.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="eea23315-8275-7472-44b0-94b9a05a6657.htm">mpz_tdiv_ui</a></td><td><div class="summary">
            Return the remainder | r | where r = <span class="parameter">n</span> - q * <span class="parameter">d</span>, and where q = trunc(<span class="parameter">n</span> / <span class="parameter">d</span>).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="20a476ea-9a38-9ef3-1e23-da2b2eba69a9.htm">mpz_tstbit</a></td><td><div class="summary">
            Test bit <span class="parameter">bit_index</span> in <span class="parameter">op</span> and return 0 or 1 accordingly. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="d9715b1a-6092-83e6-d7f3-6cfbb4adb143.htm">mpz_ui_kronecker</a></td><td><div class="summary">
            Calculate the Jacobi symbol (<span class="parameter">a</span>/<span class="parameter">b</span>) with the Kronecker extension (<span class="parameter">a</span>/2) = (2/<span class="parameter">a</span>) when <span class="parameter">a</span> odd, or (<span class="parameter">a</span>/2) = 0 when <span class="parameter">a</span> even. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="6101fda5-1230-66a9-5aff-5d8da426e364.htm">mpz_ui_pow_ui</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">base</span>^<span class="parameter">exp</span>. The case 0^0 yields 1.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="8d80c2f9-de42-f223-595e-108f165d5746.htm">mpz_ui_sub</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> - <span class="parameter">op2</span>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="c5fc473c-b8dc-8053-4199-e80d58a05230.htm">mpz_urandomb</a></td><td><div class="summary">
            Generate a uniformly distributed random integer in the range 0 to 2^<span class="parameter">n</span> - 1, inclusive.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="981cfca4-f958-045f-84b7-01717fcd88d1.htm">mpz_urandomm</a></td><td><div class="summary">
            Generate a uniform random integer in the range 0 to <span class="parameter">n</span> - 1, inclusive.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="fd4c285a-e2e1-f8ba-97b3-08d4ae6a2ebf.htm">mpz_xor</a></td><td><div class="summary">
            Set <span class="parameter">rop</span> to <span class="parameter">op1</span> bitwise exclusive-or <span class="parameter">op2</span>. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="067f64f9-7014-8c6a-3c02-153c1460a1dd.htm">reallocate</a></td><td><div class="summary">
            Resize a previously allocated block <span class="parameter">ptr</span> of <span class="parameter">old_size</span> bytes to be <span class="parameter">new_size</span> bytes.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="e3d53be6-a0ad-fb21-5381-ff688f5984a6.htm">ZeroMemory</a></td><td><div class="summary">
            The <a href="e3d53be6-a0ad-fb21-5381-ff688f5984a6.htm">ZeroMemory</a> routine fills a block of memory with zeros, given a pointer to the block and the length, in bytes, to be filled.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Fields</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="fieldList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="3f1b2832-ff9c-cc4a-3e85-e2ee16acc69b.htm">gmp_version</a></td><td><div class="summary">
            The GMP version number in the form “i.j.k”. This release is "6.1.2".
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="f88c76a8-118a-5cbd-0df1-e30adcacb8ae.htm">mp_bits_per_limb</a></td><td><div class="summary">
            The number of bits per limb.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="47695d57-9a89-48db-97c3-2ed03965d913.htm">mp_bytes_per_limb</a></td><td><div class="summary">
            The number of bytes per limb.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="af9533ce-5e67-245d-1cb3-9efb7772a6c8.htm">mp_uint_per_limb</a></td><td><div class="summary">
            The number of 32-bit, unsigned integers per limb.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID6RBSection" class="collapsibleSection"><p><h2>Functions Categories</h2></p><p><a name="Global_Variable_and_Constants" /><h3>Global Variable and Constants:</h3></p><ul><li><a href="4c3f1727-1891-2918-da3a-321930e883ed.htm">gmp_errno</a> - Gets or sets the global GMP error number.</li><li><a href="3f1b2832-ff9c-cc4a-3e85-e2ee16acc69b.htm">gmp_version</a> - The GMP version number in the form “i.j.k”. This release is "6.1.2".</li><li><a href="f88c76a8-118a-5cbd-0df1-e30adcacb8ae.htm">mp_bits_per_limb</a> - The number of bits per limb.</li><li><a href="47695d57-9a89-48db-97c3-2ed03965d913.htm">mp_bytes_per_limb</a> - The number of bytes per limb.</li><li><a href="af9533ce-5e67-245d-1cb3-9efb7772a6c8.htm">mp_uint_per_limb</a> - The number of 32-bit, unsigned integers per limb.</li></ul><p><a name="Integer_Functions" /><h3>Integer Functions:</h3></p><p><a name="Initializing_Integers" /><h4>Initializing Integers:</h4></p><ul><li><a href="dc2f13ec-ac21-1196-0a1d-c574578b1f24.htm">mpz_init</a> - Initialize <i>x</i>, and set its value to 0.</li><li><a href="de0b7cf7-1826-55f3-379d-41a6ef2d0991.htm">mpz_inits</a> - Initialize a NULL-terminated list of <a href="8beda7fb-bbc4-b56f-fd1f-1459377ecb3b.htm">mpz_t</a> variables, and set their values to 0.</li><li><a href="5cd3a242-93b7-49c5-b9c9-1dca02ed4662.htm">mpz_init2</a> - Initialize <i>x</i>, with space for <i>n</i>-bit numbers, and set its value to 0.</li><li><a href="551f8670-3080-9a92-cd50-58d09cbf77ef.htm">mpz_clear</a> - Free the space occupied by <i>x</i>.</li><li><a href="a909faa8-4939-1ba3-5647-af8836c9a291.htm">mpz_clears</a> - Free the space occupied by a NULL-terminated list of <a href="8beda7fb-bbc4-b56f-fd1f-1459377ecb3b.htm">mpz_t</a> variables.</li><li><a href="1de9b70a-1d21-8168-e41c-1c259f64091a.htm">mpz_realloc2</a> - Change the space allocated for <i>x</i> to <i>n</i> bits.</li></ul><p><a name="Assigning_Integers" /><h4>Assigning Integers:</h4></p><ul><li><a href="3a4e6141-0771-f9ac-2283-5e9348f86d4a.htm">mpz_set</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="7daadb71-9f36-2848-86c4-ba1fba25fcfd.htm">mpz_set_ui</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="1ffac718-d814-0556-ea54-dbf1d676e0cc.htm">mpz_set_si</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="8d6c39e2-22d8-d0ef-219c-dc594e73b2c5.htm">mpz_set_d</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="f6eeca07-edf7-6915-36e4-e8a7a62333d7.htm">mpz_set_q</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="9005bf40-4373-e879-9f0a-448b174aad67.htm">mpz_set_f</a> - Set the value of <i>rop</i> from <i>op</i>.</li><li><a href="6a3819df-abc1-ceb1-a5c7-87a879977b8c.htm">mpz_set_str</a> - Set the value of <i>rop</i> from <i>str</i>, a null-terminated C string in base <i>base</i>.</li><li><a href="90eada10-67d0-8376-0010-d053e5043b96.htm">mpz_swap</a> - Swap the values <i>rop1</i> and <i>rop2</i> efficiently.</li></ul><p><a name="Simultaneous_Integer_Init_Assign" /><h4>Simultaneous Integer Init &amp; Assign:</h4></p><ul><li><a href="2c37941c-dee7-0d74-7889-3fa6c20bab6a.htm">mpz_init_set</a> - Initialize <i>rop</i> with limb space and set the initial numeric value from <i>op</i>.</li><li><a href="7da3b40f-ae2c-63c5-0157-9b51d54cf6cb.htm">mpz_init_set_ui</a> - Initialize <i>rop</i> with limb space and set the initial numeric value from <i>op</i>.</li><li><a href="9cbc8594-a202-86fd-f4e8-22635ba952b5.htm">mpz_init_set_si</a> - Initialize <i>rop</i> with limb space and set the initial numeric value from <i>op</i>.</li><li><a href="fec3a449-96b9-64b0-f53d-0b5a3856d02d.htm">mpz_init_set_d</a> - Initialize <i>rop</i> with limb space and set the initial numeric value from <i>op</i>.</li><li><a href="6a3819df-abc1-ceb1-a5c7-87a879977b8c.htm">mpz_set_str</a> - Set the value of <i>rop</i> from <i>str</i>, a null-terminated C string in base <i>base</i>.</li></ul><p><a name="Converting_Integers" /><h4>Converting Integers:</h4></p><ul><li><a href="3a92eddc-59f3-b42f-9921-4e1cc5700d60.htm">mpz_get_ui</a> - Return the value of <i>op</i> as an unsigned long.</li><li><a href="da585eac-be2c-38ea-8be5-90c5be95ae86.htm">mpz_get_si</a> - Return the value of <i>op</i> as an signed long.</li><li><a href="89d8c501-6c12-9104-7e2d-be411f443b62.htm">mpz_get_d</a> - Convert <i>op</i> to a double, truncating if necessary (i.e. rounding towards zero).</li><li><a href="74e22b4c-fa79-f5f9-b752-da41bd427f37.htm">mpz_get_d_2exp</a> - Convert <i>op</i> to a double, truncating if necessary (i.e. rounding towards zero), and returning the exponent separately.</li><li><a href="54c1f778-6fc8-0056-6f25-26f6754645fb.htm">mpz_get_str</a> - Convert <i>op</i> to a string of digits in base <i>base</i>.</li></ul><p><a name="Integer_Arithmetic" /><h4>Integer Arithmetic:</h4></p><ul><li><a href="acb6d3d4-70ad-58be-7cb8-9edb997204b3.htm">mpz_add</a> - Set <i>rop</i> to <i>op1</i> + <i>op2</i>.</li><li><a href="7327aa92-1ab5-7553-7eee-7b5e3e61322a.htm">mpz_add_ui</a> - Set <i>rop</i> to <i>op1</i> + <i>op2</i>.</li><li><a href="53702772-53e9-ec51-c3a5-7a1912b4f2b4.htm">mpz_sub</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="e3e3f2ce-f3d8-5321-37a5-de65b6c2a30d.htm">mpz_sub_ui</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="8d80c2f9-de42-f223-595e-108f165d5746.htm">mpz_ui_sub</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="3523bf0e-75ec-6286-76a0-4685198e51f6.htm">mpz_mul</a> - Set <i>rop</i> to <i>op1</i> * <i>op2</i>.</li><li><a href="ffd27ee1-e1e3-567f-b3cf-87dec2de2c83.htm">mpz_mul_si</a> - Set <i>rop</i> to <i>op1</i> * <i>op2</i>.</li><li><a href="5fba9944-4437-9b1c-afa0-666d87eafe39.htm">mpz_mul_ui</a> - Set <i>rop</i> to <i>op1</i> * <i>op2</i>.</li><li><a href="582a0647-1482-ecd7-cc78-bd2222610e06.htm">mpz_addmul</a> - Set <i>rop</i> to <i>rop</i> + <i>op1</i> * <i>op2</i>.</li><li><a href="4e93c4c4-d799-2828-5285-8a3f3ed02ad3.htm">mpz_addmul_ui</a> - Set <i>rop</i> to <i>rop</i> + <i>op1</i> * <i>op2</i>.</li><li><a href="ce7d559a-3772-41c0-912f-9ab218f4d98c.htm">mpz_submul</a> - Set <i>rop</i> to <i>rop</i> - <i>op1</i> * <i>op2</i>.</li><li><a href="c5a0fa06-536c-6c6f-20c7-fb014ebc6444.htm">mpz_submul_ui</a> - Set <i>rop</i> to <i>rop</i> - <i>op1</i> * <i>op2</i>.</li><li><a href="18cd39f5-7c88-f557-3803-8a4a321cfb97.htm">mpz_mul_2exp</a> - Set <i>rop</i> to <i>op1</i> * 2^<i>op2</i>.</li><li><a href="5a61d62c-a0f0-5e86-b6dd-8ca6414b35ed.htm">mpz_neg</a> - Set <i>rop</i> to -<i>op</i>.</li><li><a href="9761cc8e-6099-7a76-5ea6-d27f617fd5d1.htm">mpz_abs</a> - Set <i>rop</i> to the absolute value of <i>op</i>.</li></ul><p><a name="Integer_Division" /><h4>Integer Division:</h4></p><ul><li><a href="8b1e9c27-7278-6032-80c0-015b93258d96.htm">mpz_cdiv_q</a> - Set the quotient <i>q</i> to ceiling(<i>n</i> / <i>d</i>).</li><li><a href="e8f34851-d0b2-335e-1ea5-f9129062aabf.htm">mpz_cdiv_r</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = ceiling(<i>n</i> / <i>d</i>).</li><li><a href="7f89c102-d1eb-2dab-0e6e-061893309c4b.htm">mpz_cdiv_qr</a> - Set the quotient <i>q</i> to ceiling(<i>n</i> / <i>d</i>), and set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>.</li><li><a href="05b3707d-5f48-4d76-c42a-566f3179d7f8.htm">mpz_cdiv_q_ui</a> - Set the quotient <i>q</i> to ceiling(<i>n</i> / <i>d</i>), and return the remainder r = | <i>n</i> - <i>q</i> * <i>d</i> |.</li><li><a href="af797947-8f84-320e-d1cd-ba578b26cef3.htm">mpz_cdiv_r_ui</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = ceiling(<i>n</i> / <i>d</i>), and return | <i>r</i> |.</li><li><a href="7aee9fae-9d14-72be-6d0f-0f9c4a863fe5.htm">mpz_cdiv_qr_ui</a> - Set quotient <i>q</i> to ceiling(<i>n</i> / <i>d</i>), set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>, and return | <i>r</i> |.</li><li><a href="290eb509-85df-a0cc-86f8-ac4e6f5d730a.htm">mpz_cdiv_ui</a> - Return the remainder | r | where r = <i>n</i> - q * <i>d</i>, and where q = ceiling(<i>n</i> / <i>d</i>).</li><li><a href="a4def6d8-f8a5-f76f-4ef0-3e6e7eec23fb.htm">mpz_cdiv_q_2exp</a> - Set the quotient <i>q</i> to ceiling(<i>n</i> / 2^<i>b</i>).</li><li><a href="8320e5d8-1df9-ca26-3054-e4b93cc0f616.htm">mpz_cdiv_r_2exp</a> - Set the remainder <i>r</i> to <i>n</i> - q * 2^<i>b</i> where q = ceiling(<i>n</i> / 2^<i>b</i>).</li><li><a href="b0d00a52-e539-c5f7-7d6d-ab202e72ad98.htm">mpz_fdiv_q</a> - Set the quotient <i>q</i> to floor(<i>n</i> / <i>d</i>).</li><li><a href="5dfc0ea9-a81f-bda9-356c-034395ba3c9c.htm">mpz_fdiv_r</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = floor(<i>n</i> / <i>d</i>).</li><li><a href="d9ab5220-69aa-8e5d-8d15-375eb27149ad.htm">mpz_fdiv_qr</a> - Set the quotient <i>q</i> to floor(<i>n</i> / <i>d</i>), and set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>.</li><li><a href="0dcf05e1-ec39-5294-c4d0-d8e0f92642e4.htm">mpz_fdiv_q_ui</a> - Set the quotient <i>q</i> to floor(<i>n</i> / <i>d</i>), and return the remainder r = | <i>n</i> - <i>q</i> * <i>d</i> |.</li><li><a href="772064e8-3ec1-840e-c79c-78f478321b6c.htm">mpz_fdiv_r_ui</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = floor(<i>n</i> / <i>d</i>), and return | <i>r</i> |.</li><li><a href="452a9316-f421-a65c-a9ba-254b201dc431.htm">mpz_fdiv_qr_ui</a> - Set quotient <i>q</i> to floor(<i>n</i> / <i>d</i>), set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>, and return | <i>r</i> |.</li><li><a href="8435af1d-e5e4-3e55-1024-449ff7b56ad4.htm">mpz_fdiv_ui</a> - Return the remainder | r | where r = <i>n</i> - q * <i>d</i>, and where q = floor(<i>n</i> / <i>d</i>).</li><li><a href="f56c5489-8c01-a687-fec8-a5f443738701.htm">mpz_fdiv_q_2exp</a> - Set the quotient <i>q</i> to floor(<i>n</i> / 2^<i>b</i>).</li><li><a href="b0f120a7-a215-fbff-1138-bac5df8d741c.htm">mpz_fdiv_r_2exp</a> - Set the remainder <i>r</i> to <i>n</i> - q * 2^<i>b</i> where q = floor(<i>n</i> / 2^<i>b</i>).</li><li><a href="4c830876-cdf6-9d94-1ceb-24d30f873bc2.htm">mpz_tdiv_q</a> - Set the quotient <i>q</i> to trunc(<i>n</i> / <i>d</i>).</li><li><a href="beb982a6-fa8e-6a0f-409a-bce1fddb6002.htm">mpz_tdiv_r</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = trunc(<i>n</i> / <i>d</i>).</li><li><a href="387ec1dd-15b3-4cc9-862a-e3f0a8e2cb78.htm">mpz_tdiv_qr</a> - Set the quotient <i>q</i> to trunc(<i>n</i> / <i>d</i>), and set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>.</li><li><a href="67fc54a2-05e7-bc3c-64f4-8c6de48fa6b6.htm">mpz_tdiv_q_ui</a> - Set the quotient <i>q</i> to trunc(<i>n</i> / <i>d</i>), and return the remainder r = | <i>n</i> - <i>q</i> * <i>d</i> |.</li><li><a href="a58b3e42-f5e9-42d3-e71a-2a6f68dec3a9.htm">mpz_tdiv_r_ui</a> - Set the remainder <i>r</i> to <i>n</i> - q * <i>d</i> where q = trunc(<i>n</i> / <i>d</i>), and return | <i>r</i> |.</li><li><a href="d5b95352-7b5e-881b-136a-b78fd8e033ff.htm">mpz_tdiv_qr_ui</a> - Set quotient <i>q</i> to trunc(<i>n</i> / <i>d</i>), set the remainder <i>r</i> to <i>n</i> - <i>q</i> * <i>d</i>, and return | <i>r</i> |.</li><li><a href="eea23315-8275-7472-44b0-94b9a05a6657.htm">mpz_tdiv_ui</a> - Return the remainder | r | where r = <i>n</i> - q * <i>d</i>, and where q = trunc(<i>n</i> / <i>d</i>).</li><li><a href="746301ec-352c-9bae-ff92-8a2ed31be655.htm">mpz_tdiv_q_2exp</a> - Set the quotient <i>q</i> to trunc(<i>n</i> / 2^<i>b</i>).</li><li><a href="c8216c67-1e74-82d0-6ca0-f24d07045ca8.htm">mpz_tdiv_r_2exp</a> - Set the remainder <i>r</i> to <i>n</i> - q * 2^<i>b</i> where q = trunc(<i>n</i> / 2^<i>b</i>).</li><li><a href="8d141ae9-4a01-bdc9-caf3-8daba3321ac1.htm">mpz_mod</a> - Set <i>r</i> to <i>n</i> mod <i>d</i>.</li><li><a href="86fd57d1-ccfa-804e-760b-bd8e7ade2176.htm">mpz_mod_ui</a> - Set <i>r</i> to <i>n</i> mod <i>d</i>.</li><li><a href="2ddc32dc-4ee3-18e9-dd3d-7e64c3304e1e.htm">mpz_divexact</a> - Set <i>q</i> to <i>n</i> / <i>d</i> when it is known in advance that <i>d</i> divides <i>n</i>. </li><li><a href="3ddee65c-a067-79a3-968d-31f3d585db3b.htm">mpz_divexact_ui</a> - Set <i>q</i> to <i>n</i> / <i>d</i> when it is known in advance that <i>d</i> divides <i>n</i>. </li><li><a href="4bafc7fe-d2a8-7cf2-b9b8-c296550b4ef2.htm">mpz_divisible_p</a> - Return non-zero if <i>n</i> is exactly divisible by <i>d</i>.</li><li><a href="6c026976-a6c9-6f12-6b31-c113166ea236.htm">mpz_divisible_ui_p</a> - Return non-zero if <i>n</i> is exactly divisible by <i>d</i>.</li><li><a href="4f821e78-facb-4ea2-ab21-62d1f5049e68.htm">mpz_divisible_2exp_p</a> - Return non-zero if <i>n</i> is exactly divisible by 2^<i>b</i>.</li><li><a href="2ff1eb0a-f399-2ad2-f7d1-3fb51dceac10.htm">mpz_congruent_p</a> - Return non-zero if <i>n</i> is congruent to <i>c</i> modulo <i>d</i>.</li><li><a href="3eae225a-8db3-3b14-d862-03718f3a5548.htm">mpz_congruent_ui_p</a> - Return non-zero if <i>n</i> is congruent to <i>c</i> modulo <i>d</i>.</li><li><a href="4b6a07f8-2a61-d1a3-7192-f2907292bf2a.htm">mpz_congruent_2exp_p</a> - Return non-zero if <i>n</i> is congruent to <i>c</i> modulo 2^<i>b</i>.</li></ul><p><a name="Integer_Exponentiation" /><h4>Integer Exponentiation:</h4></p><ul><li><a href="9de702f4-758b-2a4e-1025-ed5e46cc7db2.htm">mpz_powm</a> - Set <i>rop</i> to (<i>base</i>^<i>exp</i>) modulo <i>mod</i>. </li><li><a href="9fd28088-e353-2b5e-03e3-9c2763226ed6.htm">mpz_powm_ui</a> - Set <i>rop</i> to (<i>base</i>^<i>exp</i>) modulo <i>mod</i>. </li><li><a href="93210ab6-2523-3130-044a-80bcf43c181d.htm">mpz_powm_sec</a> - Set <i>rop</i> to (<i>base</i>^<i>exp</i>) modulo <i>mod</i>.</li><li><a href="8e3a525d-9371-fb32-1051-e8e8fe23a63d.htm">mpz_pow_ui</a> - Set <i>rop</i> to <i>base</i>^<i>exp</i>. The case 0^0 yields 1. </li><li><a href="6101fda5-1230-66a9-5aff-5d8da426e364.htm">mpz_ui_pow_ui</a> - Set <i>rop</i> to <i>base</i>^<i>exp</i>. The case 0^0 yields 1.</li></ul><p><a name="Integer_Roots" /><h4>Integer Roots:</h4></p><ul><li><a href="279877e1-b8d0-f52c-16ba-b2e38e671437.htm">mpz_root</a> - Set <i>rop</i> to the truncated integer part of the <i>n</i>th root of <i>op</i>.</li><li><a href="a637ce7e-54d7-eba9-0c6f-c237f115b621.htm">mpz_rootrem</a> - Set <i>root</i> to the truncated integer part of the <i>n</i>th root of <i>u</i>. Set <i>rem</i> to the remainder, <i>u</i> - <i>root</i>^<i>n</i>. </li><li><a href="1e1204c7-2d33-c9d1-4f4e-c36215f5ebed.htm">mpz_sqrt</a> - Set <i>rop</i> to the truncated integer part of the square root of <i>op</i>.</li><li><a href="e802af92-73bf-b138-dc95-a3c57eeefb66.htm">mpz_sqrtrem</a> - Set <i>rop1</i> to the truncated integer part of the square root of <i>op</i>, like mpz_sqrt. Set <i>rop2</i> to the remainder <i>op</i> - <i>rop1</i> * <i>rop1</i>, which will be zero if <i>op</i> is a perfect square.</li><li><a href="d7722641-e3ea-336d-63f3-dc48f786e376.htm">mpz_perfect_power_p</a> - Return non-zero if <i>op</i> is a perfect power, i.e., if there exist integers a and b, with b &gt; 1, such that <i>op</i> = a^b. </li><li><a href="260d6edf-ce02-26f7-d704-ad0d11604e61.htm">mpz_perfect_square_p</a> - Return non-zero if <i>op</i> is a perfect square, i.e., if the square root of <i>op</i> is an integer.</li></ul><p><a name="Number_Theoretic_Functions" /><h4>Number Theoretic Functions:</h4></p><ul><li><a href="52ce0428-7c09-f2b9-f517-d3d02521f365.htm">mpz_probab_prime_p</a> - Determine whether <i>n</i> is prime.</li><li><a href="88f2d84b-105b-f882-ac55-54a2b6aea39d.htm">mpz_nextprime</a> - Set <i>rop</i> to the next prime greater than <i>op</i>.</li><li><a href="4e14cfc4-6f8b-14f7-74df-2f4415ce6f1c.htm">mpz_gcd</a> - Set <i>rop</i> to the greatest common divisor of <i>op1</i> and <i>op2</i>.</li><li><a href="88b8d333-9c9c-de7d-8131-6d1432c14a0c.htm">mpz_gcd_ui</a> - Compute the greatest common divisor of <i>op1</i> and <i>op2</i>. If <i>rop</i> is not null, store the result there. </li><li><a href="fae08c47-86df-9010-1827-a9fa6e48a1af.htm">mpz_gcdext</a> - Set <i>g</i> to the greatest common divisor of <i>a</i> and <i>b</i>, and in addition set <i>s</i> and <i>t</i> to coefficients satisfying <i>a</i> * <i>s</i> + <i>b</i> * <i>t</i> = <i>g</i>.</li><li><a href="db614763-a13e-6456-d52b-9f567be7e776.htm">mpz_lcm</a> - Set <i>rop</i> to the least common multiple of <i>op1</i> and <i>op2</i>.</li><li><a href="f60dbcbd-d4f0-edcc-8f88-2de1aa375e6b.htm">mpz_lcm_ui</a> - Set <i>rop</i> to the least common multiple of <i>op1</i> and <i>op2</i>.</li><li><a href="e3072efb-05a9-947c-5532-6d806c157e4a.htm">mpz_invert</a> - Compute the inverse of <i>op1</i> modulo <i>op2</i> and put the result in <i>rop</i>.</li><li><a href="38be0c24-42ac-e0ea-9e18-e75e3bda2a1e.htm">mpz_jacobi</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>).</li><li><a href="b5936979-01aa-1cd8-20de-d6386368e234.htm">mpz_legendre</a> - Calculate the Legendre symbol (<i>a</i>/<i>p</i>).</li><li><a href="54ba330f-67d3-fa30-2d5f-0480b7f4659c.htm">mpz_kronecker</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>) with the Kronecker extension (<i>a</i>/2) = (2/<i>a</i>) when <i>a</i> odd, or (<i>a</i>/2) = 0 when <i>a</i> even. </li><li><a href="0252e04b-b8fc-5a06-e1e2-a0cafbb44296.htm">mpz_kronecker_si</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>) with the Kronecker extension (<i>a</i>/2) = (2/<i>a</i>) when <i>a</i> odd, or (<i>a</i>/2) = 0 when <i>a</i> even. </li><li><a href="07613c31-7d00-9806-1676-55f8c5a997f8.htm">mpz_kronecker_ui</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>) with the Kronecker extension (<i>a</i>/2) = (2/<i>a</i>) when <i>a</i> odd, or (<i>a</i>/2) = 0 when <i>a</i> even. </li><li><a href="a248732b-c4be-7e9a-4207-0049371764ff.htm">mpz_si_kronecker</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>) with the Kronecker extension (<i>a</i>/2) = (2/<i>a</i>) when <i>a</i> odd, or (<i>a</i>/2) = 0 when <i>a</i> even. </li><li><a href="d9715b1a-6092-83e6-d7f3-6cfbb4adb143.htm">mpz_ui_kronecker</a> - Calculate the Jacobi symbol (<i>a</i>/<i>b</i>) with the Kronecker extension (<i>a</i>/2) = (2/<i>a</i>) when <i>a</i> odd, or (<i>a</i>/2) = 0 when <i>a</i> even. </li><li><a href="d6721058-8a6f-9b20-2a5f-8ffd83cc2a2e.htm">mpz_remove</a> - Remove all occurrences of the factor <i>f</i> from <i>op</i> and store the result in <i>rop</i>.</li><li><a href="17280f99-d0dc-6714-12c7-be17c97c0cdb.htm">mpz_fac_ui</a> - Set <i>rop</i> to the factorial <i>n</i>!.</li><li><a href="d479f2da-ecf9-c9d6-5cc7-66eb8b5ba16b.htm">mpz_2fac_ui</a> - Set <i>rop</i> to the double-factorial <i>n</i>!!.</li><li><a href="b4ff3a9e-3ab5-689f-7a80-b61dad2ea125.htm">mpz_mfac_uiui</a> - Set <i>rop</i> to the m-multi-factorial <i>n</i>!^(<i>m</i>)n.</li><li><a href="985a65cd-9a65-e8b3-580b-626b65662dd6.htm">mpz_primorial_ui</a> - Set <i>rop</i> to the primorial of <i>n</i>, i.e. the product of all positive prime numbers ≤ <i>n</i>. </li><li><a href="cbbdf666-7c6c-f3f3-1790-b5bb1655af87.htm">mpz_bin_ui</a> - Compute the binomial coefficient <i>n</i> over <i>k</i> and store the result in <i>rop</i>.</li><li><a href="402dc8d2-32bd-59ad-80f3-4bd2cc000b0d.htm">mpz_bin_uiui</a> - Compute the binomial coefficient <i>n</i> over <i>k</i> and store the result in <i>rop</i>.</li><li><a href="71884691-07d0-7bdf-c761-df9b07723735.htm">mpz_fib_ui</a> - Sets <i>fn</i> to to F[<i>n</i>], the <i>n</i>’th Fibonacci number. </li><li><a href="c0f8ab02-55db-8a6b-705d-6fa700d54545.htm">mpz_fib2_ui</a> - Sets <i>fn</i> to F[<i>n</i>], and <i>fnsub1</i> to F[<i>n</i> - 1]. </li><li><a href="a48d50bf-0432-7feb-cc41-d6bf70f78e58.htm">mpz_lucnum_ui</a> - Sets <i>ln</i> to to L[<i>n</i>], the <i>n</i>’th Lucas number. </li><li><a href="0cdaca8f-816e-8c22-f46b-fcf58e9e91d4.htm">mpz_lucnum2_ui</a> - Sets <i>ln</i> to L[<i>n</i>], and <i>lnsub1</i> to L[<i>n</i> - 1]. </li><li><a href="f0bda1a7-4b40-0896-4939-4dc66b256424.htm">mpz_millerrabin</a> - An implementation of the probabilistic primality test found in Knuth's Seminumerical Algorithms book.</li></ul><p><a name="Integer_Comparisons" /><h4>Integer Comparisons:</h4></p><ul><li><a href="eea958f4-5951-38f2-05ba-3870cefb3842.htm">mpz_cmp</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="bb37470f-5f40-4f6d-01d9-4e40446782a3.htm">mpz_cmp_d</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="2e55f6fd-0083-fc85-0d42-65e472376dbe.htm">mpz_cmp_si</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="bfe022c5-95d3-45d7-0c6f-97167a9a0af2.htm">mpz_cmp_ui</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="3e06d348-8a15-691d-5889-ab3f1a4c9f73.htm">mpz_cmpabs</a> - Compare the absolute values of <i>op1</i> and <i>op2</i>.</li><li><a href="011efd01-e7f0-47d8-7d1e-77888d96f0d4.htm">mpz_cmpabs_d</a> - Compare the absolute values of <i>op1</i> and <i>op2</i>.</li><li><a href="05f897c4-77dc-7735-81ca-65650f61d961.htm">mpz_cmpabs_ui</a> - Compare the absolute values of <i>op1</i> and <i>op2</i>.</li><li><a href="86b2033c-26c3-3889-9025-b2a638910a86.htm">mpz_sgn</a> - Return +1 if <i>op</i> &gt; 0, 0 if <i>op</i> = 0, and -1 if <i>op</i> &lt; 0.</li></ul><p><a name="Integer_Logic_and_Bit_Fiddling" /><h4>Integer Logic and Bit Fiddling:</h4></p><ul><li><a href="3e5268ed-796b-2880-93a3-8d17143f99b1.htm">mpz_and</a> - Set <i>rop</i> to <i>op1</i> bitwise-and <i>op2</i>. </li><li><a href="0ccb1bab-4817-1062-242d-41c181cacf77.htm">mpz_ior</a> - Set <i>rop</i> to <i>op1</i> bitwise inclusive-or <i>op2</i>. </li><li><a href="fd4c285a-e2e1-f8ba-97b3-08d4ae6a2ebf.htm">mpz_xor</a> - Set <i>rop</i> to <i>op1</i> bitwise exclusive-or <i>op2</i>. </li><li><a href="635ddf01-9c52-0d37-202e-c560b895fb7d.htm">mpz_com</a> - Set <i>rop</i> to the one’s complement of <i>op</i>.</li><li><a href="84bf95e4-d9d0-4ffe-f836-3650342de962.htm">mpz_popcount</a> - Return the population count of <i>op</i>.</li><li><a href="4dfb8bd5-8a6f-6919-7aa9-8c060d42b5d7.htm">mpz_hamdist</a> - Return the hamming distance between the two operands.</li><li><a href="3e36be2b-14ed-eb7b-0546-af6d49e983fa.htm">mpz_scan0</a> - Scan <i>op</i> for 0 bit.</li><li><a href="480d1d15-b561-ac8f-b12a-f27ba075b3f2.htm">mpz_scan1</a> - Scan <i>op</i> for 1 bit.</li><li><a href="f0caf821-320b-1a8b-87ff-84fcbdfd5801.htm">mpz_setbit</a> - Set bit <i>bit_index</i> in <i>rop</i>.</li><li><a href="8812c658-675a-b564-9159-2383971747b1.htm">mpz_clrbit</a> - Clear bit <i>bit_index</i> in <i>rop</i>.</li><li><a href="4a959468-7670-9303-a5e7-3f1de8f17a62.htm">mpz_combit</a> - Complement bit <i>bit_index</i> in <i>rop</i>. </li><li><a href="20a476ea-9a38-9ef3-1e23-da2b2eba69a9.htm">mpz_tstbit</a> - Test bit <i>bit_index</i> in <i>op</i> and return 0 or 1 accordingly. </li></ul><p><a name="IO_of_Integers" /><h4>I/O of Integers:</h4></p><ul><li><a href="6f85986d-b6a0-435d-3675-c025ef70413d.htm">mpz_out_str</a> - Output <i>op</i> on stdio stream <i>stream</i>, as a string of digits in base <i>base</i>.</li><li><a href="8b8d6ec1-3ae5-e6f3-f030-289abe5002d0.htm">mpz_inp_str</a> - Input a possibly white-space preceded string in base <i>base</i> from stdio stream <i>stream</i>, and put the read integer in <i>rop</i>. </li><li><a href="053b54b6-f646-f0aa-ddaf-00c494a6d5ef.htm">mpz_out_raw</a> - Output <i>op</i> on stdio stream <i>stream</i>, in raw binary format.</li><li><a href="053b54b6-f646-f0aa-ddaf-00c494a6d5ef.htm">mpz_out_raw</a>, and put the result in <i>rop</i>.</li></ul><p><a name="Integer_Random_Numbers" /><h4>Integer Random Numbers:</h4></p><ul><li><a href="c5fc473c-b8dc-8053-4199-e80d58a05230.htm">mpz_urandomb</a> - Generate a uniformly distributed random integer in the range 0 to 2^<i>n</i> - 1, inclusive.</li><li><a href="981cfca4-f958-045f-84b7-01717fcd88d1.htm">mpz_urandomm</a> - Generate a uniform random integer in the range 0 to <i>n</i> - 1, inclusive.</li><li><a href="4be917d3-47c6-cb58-d768-6276e78f0afb.htm">mpz_rrandomb</a> - Generate a random integer with long strings of zeros and ones in the binary representation.</li><li><a href="2b0da39e-331c-878e-26c7-bd6d81c7f8e0.htm">mpz_random</a> - Generate a random integer of at most <i>max_size</i> limbs.</li><li><a href="cd88d27d-fb03-9e74-e353-4f0df7a38a96.htm">mpz_random2</a> - Generate a random integer of at most <i>max_size</i> limbs, with long strings of zeros and ones in the binary representation.</li></ul><p><a name="Integer_Import_and_Export" /><h4>Integer Import and Export:</h4></p><ul><li><a href="8c8c1e55-275f-cff8-2152-883a4eaa163c.htm">mpz_import</a> - Set <i>rop</i> from an array of word data at <i>op</i>.</li><li><a href="5fbffc1a-1ac4-6ca6-e528-abe7f8c96667.htm">mpz_export</a> - Fill <i>rop</i> with word data from <i>op</i>.</li></ul><p><a name="Miscellaneous_Integer_Functions" /><h4>Miscellaneous Integer Functions:</h4></p><ul><li><a href="a066df5a-c312-3b00-6092-6f914c3ee248.htm">mpz_fits_sint_p</a> - Return non-zero iff the value of <i>op</i> fits in a signed 32-bit integer. Otherwise, return zero.</li><li><a href="cad028df-c3f1-12b6-d8dd-56c4968730e4.htm">mpz_fits_slong_p</a> - Return non-zero iff the value of <i>op</i> fits in a signed 32-bit integer. Otherwise, return zero.</li><li><a href="e07f3328-a28c-c75c-10a6-f21d05e6aec0.htm">mpz_fits_sshort_p</a> - Return non-zero iff the value of <i>op</i> fits in a signed 16-bit integer. Otherwise, return zero.</li><li><a href="3ce0cc26-e888-90f8-a517-aad88332eec0.htm">mpz_fits_uint_p</a> - Return non-zero iff the value of <i>op</i> fits in an unsigned 32-bit integer. Otherwise, return zero.</li><li><a href="fb9e7caf-b049-7884-b70c-185053972604.htm">mpz_fits_ulong_p</a> - Return non-zero iff the value of <i>op</i> fits in an unsigned 32-bit integer. Otherwise, return zero.</li><li><a href="6b85c6a3-d6c5-d1d2-829a-af000bae687e.htm">mpz_fits_ushort_p</a> - Return non-zero iff the value of <i>op</i> fits in an unsigned 16-bit integer. Otherwise, return zero.</li><li><a href="7dfe367e-74d3-e782-860b-2314da9c44cf.htm">mpz_sizeinbase</a> - Return the size of <i>op</i> measured in number of digits in the given <i>base</i>.</li><li><a href="e6012778-c71b-b078-2ef3-9f9db90f1769.htm">mpz_even_p</a> - Determine whether <i>op</i> is even.</li><li><a href="6820d6c4-6ee1-53d7-7223-3f654a496ce4.htm">mpz_odd_p</a> - Determine whether <i>op</i> is odd.</li></ul><p><a name="Integer_Special_Functions" /><h4>Integer Special Functions:</h4></p><ul><li><a href="c9cb6a67-59b8-5c03-f31d-f252441c53f6.htm">_mpz_realloc</a> - Change the space for <i>integer</i> to <i>new_alloc</i> limbs.</li><li><a href="1dfbf5da-f4c2-bbab-5708-3b31d40e4f16.htm">mpz_getlimbn</a> - Return limb number <i>n</i> from <i>op</i>.</li><li><a href="9a169dd9-42b0-ea59-abbe-4efc6b870c75.htm">mpz_size</a> - Return the size of <i>op</i> measured in number of limbs.</li><li><a href="4b08344c-f506-a717-4e1d-112cd19f5286.htm">mpz_limbs_read</a> - Return a pointer to the limb array representing the absolute value of <i>x</i>.</li><li><a href="86ddbf69-57f6-af58-bd13-3eca06123b29.htm">mpz_limbs_write</a> - Return a pointer to the limb array of <i>x</i>, intended for write access.</li><li><a href="87f5432d-aacb-57b6-b4a7-e4dc803684a4.htm">mpz_limbs_modify</a> - Return a pointer to the limb array of <i>x</i>, intended for write access.</li><li><a href="398e3eb8-0f55-086f-a765-0a8b3c9307e0.htm">mpz_limbs_finish</a> - Updates the internal size field of <i>x</i>.</li><li><a href="5786e0c6-2dde-406f-b86d-3df6757c80c0.htm">mpz_roinit_n</a> - Special initialization of <i>x</i>, using the given limb array and size.</li></ul><p><a name="Rational_Number_Functions" /><h3>Rational Number Functions:</h3></p><p><a name="Initializing_Rationals" /><h4>Initializing Rationals:</h4></p><ul><li><a href="19d53697-65f1-2df5-62f3-988182af0c88.htm">mpq_canonicalize</a> - Remove any factors that are common to the numerator and denominator of <i>op</i>, and make the denominator positive.</li><li><a href="dbf3d252-fd6d-455f-2ba7-4091845b86a7.htm">mpq_init</a> - Initialize <i>x</i> and set it to 0/1.</li><li><a href="8ab8ea40-9723-f0c8-18f4-9558c73397b9.htm">mpq_inits</a> - Initialize a NULL-terminated list of <a href="635f1879-5f85-881e-cca8-3222baf5045a.htm">mpq_t</a> variables, and set their values to 0/1. </li><li><a href="b69da354-160b-602a-4cc4-faf7ca423186.htm">mpq_clear</a> - Free the space occupied by <i>x</i>.</li><li><a href="cc2693e9-1cc5-3098-f2f7-bb05c8017f62.htm">mpq_clears</a> - Free the space occupied by a NULL-terminated list of <a href="635f1879-5f85-881e-cca8-3222baf5045a.htm">mpq_t</a> variables. </li><li><a href="9eac8ea9-0821-09b2-8091-e6638c562c7f.htm">mpq_set</a> - Assign <i>rop</i> from <i>op</i>.</li><li><a href="84d256a1-cd11-3bf9-3e8c-8a7e1980315d.htm">mpq_set_z</a> - Assign <i>rop</i> from <i>op</i>.</li><li><a href="915a7958-6821-bb64-468f-b0b48b351878.htm">mpq_set_ui</a> - Set the value of <i>rop</i> to <i>op1</i> / <i>op2</i>.</li><li><a href="ba898f37-20d0-a5cd-eff1-0663f18220dd.htm">mpq_set_si</a> - Set the value of <i>rop</i> to <i>op1</i> / <i>op2</i>.</li><li><a href="e98ec3cf-b539-8024-c401-ecd24bd43662.htm">mpq_set_str</a> - Set <i>rop</i> from a null-terminated string <i>str</i> in the given <i>base</i>.</li><li><a href="11e36fbc-ffc4-46df-50b7-2b07684c1755.htm">mpq_swap</a> - Swap the values <i>rop1</i> and <i>rop2</i> efficiently. </li></ul><p><a name="Rational_Conversions" /><h4>Rational Conversions:</h4></p><ul><li><a href="f88b40d4-3da9-e2c7-4c4c-1ad868778075.htm">mpq_get_d</a> - Convert <i>op</i> to a <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System.Double</a>, truncating if necessary (i.e. rounding towards zero). </li><li><a href="1a7c5874-9132-2c43-e407-df1eead74fab.htm">mpq_set_d</a> - Set <i>rop</i> to the value of <i>op</i>. There is no rounding, this conversion is exact. </li><li><a href="f5dc74ec-155b-2a14-3eb5-4610a8509bae.htm">mpq_set_f</a> - Set <i>rop</i> to the value of <i>op</i>. There is no rounding, this conversion is exact. </li><li><a href="f457878b-c3f5-bfe2-aaa9-7f2179332f57.htm">mpq_get_str</a> - Convert <i>op</i> to a string of digits in base <i>base</i>.</li></ul><p><a name="Rational_Arithmetic" /><h4>Rational Arithmetic:</h4></p><ul><li><a href="ca6a2024-43ea-fb4e-245e-12e2e01e4ebd.htm">mpq_add</a> - Set <i>sum</i> to <i>addend1</i> + <i>addend2</i>. </li><li><a href="e7d65cf6-2ee4-c983-62b5-4ad66f1d8599.htm">mpq_sub</a> - Set <i>difference</i> to <i>minuend</i> - <i>subtrahend</i>.</li><li><a href="584834ae-b1f7-d965-2586-f88d5c9b4f67.htm">mpq_mul</a> - Set <i>product</i> to <i>multiplier</i> * <i>multiplicand</i>. </li><li><a href="f148f8be-dfbc-fc41-981d-0a99834f01ff.htm">mpq_mul_2exp</a> - Set <i>rop</i> to <i>op1</i> * 2^<i>op2</i>.</li><li><a href="433b0777-4514-5b20-7494-f0f2746fe8e5.htm">mpq_div</a> - Set <i>quotient</i> to <i>dividend</i> / <i>divisor</i>. </li><li><a href="8dc5397d-96e4-74dd-cd31-0d05649ea927.htm">mpq_div_2exp</a> - Set <i>rop</i> to <i>op1</i> / 2^<i>op2</i>.</li><li><a href="b6bd5187-99bb-c6b5-d871-b163fa0f7e0e.htm">mpq_neg</a> - Set <i>negated_operand</i> to -<i>operand</i>.</li><li><a href="1f2250c3-a1b8-db12-19e4-9946e39eb64c.htm">mpq_abs</a> - Set <i>rop</i> to the absolute value of <i>op</i>.</li><li><a href="3b01109c-5b01-16d2-edd0-5ac3d5514930.htm">mpq_inv</a> - Set <i>inverted_number</i> to 1 / <i>number</i>.</li></ul><p><a name="Comparing_Rationals" /><h4>Comparing Rationals:</h4></p><ul><li><a href="3f29d5f4-13ae-cec8-ea75-6a76d00d10fc.htm">mpq_cmp</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="bc33b7de-0deb-669e-0bb7-6cd1090f4aea.htm">mpq_cmp_z</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="03336561-2bb9-b38f-8adb-506e0fad094b.htm">mpq_cmp_ui</a> - Compare <i>op1</i> and <i>num2</i> / <i>den2</i>.</li><li><a href="43cb2c87-9fab-eb9d-2f7a-140d72af7b15.htm">mpq_cmp_si</a> - Compare <i>op1</i> and <i>num2</i> / <i>den2</i>.</li><li><a href="1176cc4e-ffda-2993-1a4a-2e0c7ed24adb.htm">mpq_sgn</a> - Return +1 if <i>op</i> &gt; 0, 0 if <i>op</i> = 0, and -1 if <i>op</i> &lt; 0. </li><li><a href="7828ce92-079b-da4d-aab2-1742209287fb.htm">mpq_equal</a> - Return non-zero if <i>op1</i> and <i>op2</i> are equal, zero if they are non-equal. </li></ul><p><a name="Applying_Integer_Functions" /><h4>Applying Integer Functions:</h4></p><ul><li><a href="a4c2958c-5957-d736-6883-ce7e76b3d7a4.htm">mpq_numref</a> - Return a reference to the numerator <i>op</i>.</li><li><a href="2d93abcb-e73f-fe40-a50b-395a0bf6a4fc.htm">mpq_denref</a> - Return a reference to the denominator <i>op</i>.</li><li><a href="4f98333c-76a2-db46-cbba-97785a449450.htm">mpq_get_num</a> - Set <i>numerator</i> to the numerator of <i>rational</i>.</li><li><a href="ae9e468d-e9ce-db55-1964-433829dfa476.htm">mpq_get_den</a> - Set <i>denominator</i> to the denominator of <i>rational</i>.</li><li><a href="6885ad71-c185-1e0c-abc8-4320e12f377a.htm">mpq_set_num</a> - Set the numerator of <i>rational</i> to <i>numerator</i>.</li><li><a href="52388f4c-575a-9b13-41a6-e7ec2bd0becd.htm">mpq_set_den</a> - Set the denominator of <i>rational</i> to <i>denominator</i>.</li></ul><p><a name="IO_of_Rationals" /><h4>I/O of Rationals:</h4></p><ul><li><a href="e1c059c4-4cd9-9a2b-1178-4b1a60354129.htm">mpq_out_str</a> - Output <i>op</i> on stdio stream <i>stream</i>, as a string of digits in base <i>base</i>.</li><li><a href="38d3a9de-bae7-3f44-18e0-38fe450d4cba.htm">mpq_inp_str</a> - Read a string of digits from <i>stream</i> and convert them to a rational in <i>rop</i>.</li></ul><p><a name="Floating_point_Functions" /><h3>Floating-point Functions:</h3></p><p><a name="Initializing_Floats" /><h4>Initializing Floats:</h4></p><ul><li><a href="9e93d02e-f5c7-1a6f-68fe-a33d793a93e2.htm">mpf_set_default_prec</a> - Set the default precision to be at least <i>prec</i> bits.</li><li><a href="1ca4ec7e-b5d1-3b51-8341-5a345990e62d.htm">mpf_get_default_prec</a> - Return the default precision actually used. </li><li><a href="0dd846ac-56b6-3ea8-0441-12490f67fbf7.htm">mpf_init</a> - Initialize <i>x</i> to 0.</li><li><a href="98083eac-9993-41b2-4943-678785fce712.htm">mpf_init2</a> - Initialize <i>x</i> to 0 and set its precision to be at least <i>prec</i> bits.</li><li><a href="018278a0-148f-c898-5bd0-42aae4ae0069.htm">mpf_inits</a> - Initialize a NULL-terminated list of <a href="37c88d6c-8d02-2330-ad77-f20fb73d1677.htm">mpf_t</a> variables, and set their values to 0.</li><li><a href="3a2a17ed-a64c-8716-7f65-18c661a5279f.htm">mpf_clear</a> - Free the space occupied by <i>x</i>.</li><li><a href="bfb87570-3b2e-079a-1528-3746424bbdef.htm">mpf_clears</a> - Free the space occupied by a NULL-terminated list of <a href="37c88d6c-8d02-2330-ad77-f20fb73d1677.htm">mpf_t</a> variables. </li><li><a href="96c4a09e-3f83-00ab-30d0-78a82764b0ce.htm">mpf_get_prec</a> - Return the current precision of <i>op</i>, in bits. </li><li><a href="438e6843-fc7b-4e6f-9ac0-d97a2773b032.htm">mpf_set_prec</a> - Set the precision of <i>rop</i> to be at least <i>prec</i> bits.</li><li><a href="b456f637-83f4-9d4f-18c5-052d77fbf981.htm">mpf_set_prec_raw</a> - Set the precision of <i>rop</i> to be at least <i>prec</i> bits, without changing the memory allocated. </li><li><a href="4c81a27a-206c-e5da-44e9-0ac7767b3366.htm">mpf_size</a> - Return the number of limbs currently in use.</li></ul><p><a name="Assigning_Floats" /><h4>Assigning Floats:</h4></p><ul><li><a href="3a025035-e715-0a3d-8d2d-6011430c9463.htm">mpf_set</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="060aa73e-8c00-0a6b-f569-ad198c4f0d90.htm">mpf_set_ui</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="f059f8e4-dfc8-79fe-6455-42e227ccbc2e.htm">mpf_set_si</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="1d0c5734-9f0d-ec6b-c540-4379f832b0ca.htm">mpf_set_d</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="d60489f8-91f8-ea00-d29c-a52449e712da.htm">mpf_set_z</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="bd669b1e-a941-2e35-7c29-29a5b5ff5e3a.htm">mpf_set_q</a> - Set the value of <i>rop</i> from <i>op</i>. </li><li><a href="823b356e-0731-c9ca-0b37-660b6eb9ee7c.htm">mpf_set_str</a> - Set the value of <i>rop</i> from the string in <i>str</i>.</li><li><a href="b77c0292-518a-64d8-4b4e-0dd3c0cb801f.htm">mpf_swap</a> - Swap <i>rop1</i> and <i>rop2</i> efficiently. </li></ul><p><a name="Simultaneous_Float_Init_Assign" /><h4>Simultaneous Float Init &amp; Assign:</h4></p><ul><li><a href="17b3dc26-68af-fb0c-9923-36777e8bd87e.htm">mpf_init_set</a> - Initialize <i>rop</i> and set its value from <i>op</i>.</li><li><a href="8d1b97c9-ef9d-303a-0fbe-e7ece7edf391.htm">mpf_init_set_ui</a> - Initialize <i>rop</i> and set its value from <i>op</i>.</li><li><a href="dc1406fd-4ca4-70d3-dc83-bd40b955564a.htm">mpf_init_set_si</a> - Initialize <i>rop</i> and set its value from <i>op</i>.</li><li><a href="a2c14761-1b23-0de9-3842-c2d4e3d7aac0.htm">mpf_init_set_d</a> - Initialize <i>rop</i> and set its value from <i>op</i>.</li><li><a href="4e30a5e0-637b-949e-a627-387a56945f7b.htm">mpf_init_set_str</a> - Initialize <i>rop</i> and set its value from the string in <i>str</i>.</li></ul><p><a name="Converting_Floats" /><h4>Converting Floats:</h4></p><ul><li><a href="648fa405-45d3-506a-f6be-72642e8a7f32.htm">mpf_get_d</a> - Convert <i>op</i> to a <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System.Double</a>, truncating if necessary (i.e. rounding towards zero). </li><li><a href="e1edc21e-74a0-b44c-216b-bad204b5a48a.htm">mpf_get_d_2exp</a> - Convert op to a double, truncating if necessary (i.e. rounding towards zero), and with an exponent returned separately. </li><li><a href="d948e832-ee71-628a-6a7b-766138afff62.htm">mpf_get_si</a> - Convert <i>op</i> to a 32-bit integer, truncating any fraction part.</li><li><a href="aa3fd0ea-a8b6-674b-59ff-b6d4785baed1.htm">mpf_get_ui</a> - Convert <i>op</i> to an unsigned 32-bit integer, truncating any fraction part.</li><li><a href="73766ead-a037-a852-4589-04adc3407e15.htm">mpf_get_str</a> - Convert <i>op</i> to a string of digits in base <i>base</i>.</li></ul><p><a name="Float_Arithmetic" /><h4>Float Arithmetic:</h4></p><ul><li><a href="c19999f1-01ee-a3fe-dc4d-2a459e73492d.htm">mpf_add</a> - Set <i>rop</i> to <i>op1</i> + <i>op2</i>.</li><li><a href="45a76d5c-c5bf-e7f8-906a-15d290e9a50d.htm">mpf_add_ui</a> - Set <i>rop</i> to <i>op1</i> + <i>op2</i>.</li><li><a href="718e7623-d25b-8a09-2543-745f24cd82c1.htm">mpf_sub</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="efbe678f-e1f3-b203-eb36-0db03ba11795.htm">mpf_ui_sub</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="ca339303-b509-db06-c875-3aac3edec5dd.htm">mpf_sub_ui</a> - Set <i>rop</i> to <i>op1</i> - <i>op2</i>.</li><li><a href="309e6a8c-1318-2d30-a058-f119193546a0.htm">mpf_mul</a> - Set <i>rop</i> to <i>op1</i> * <i>op2</i>. </li><li><a href="99a405b5-c051-9905-cf57-7139a0e503cf.htm">mpf_mul_ui</a> - Set <i>rop</i> to <i>op1</i> * <i>op2</i>. </li><li><a href="4e876639-72f5-7659-f4a9-862639e27e1c.htm">mpf_div</a> - Set <i>rop</i> to <i>op1</i> / <i>op2</i>. </li><li><a href="34a39f93-359c-526f-c9ad-cd7558968f1e.htm">mpf_ui_div</a> - Set <i>rop</i> to <i>op1</i> / <i>op2</i>. </li><li><a href="3985111a-6d13-b418-9c90-422a8e1e5b8b.htm">mpf_div_ui</a> - Set <i>rop</i> to <i>op1</i> / <i>op2</i>. </li><li><a href="00a7e91d-b046-f5d3-5b51-55868d87e228.htm">mpf_sqrt</a> - Set <i>rop</i> to the square root of <i>op</i>. </li><li><a href="44e6038b-2e97-b53d-0d46-ce1fff3522d0.htm">mpf_sqrt_ui</a> - Set <i>rop</i> to the square root of <i>op</i>. </li><li><a href="96e2fb95-0ac0-3d24-bea9-ee5631f30347.htm">mpf_pow_ui</a> - Set <i>rop</i> to <i>op1</i>^<i>op2</i>.</li><li><a href="357791cb-951d-5542-ff67-c00ef5e9aadb.htm">mpf_neg</a> - Set <i>rop</i> to -<i>op</i>. </li><li><a href="17731ba4-bf91-6b9b-737a-a9cc306ba17d.htm">mpf_abs</a> - Set <i>rop</i> to | <i>op</i> |. </li><li><a href="2041c81e-218b-b514-5a7b-5ee315711bc9.htm">mpf_mul_2exp</a> - Set <i>rop</i> to <i>op1</i> * 2^<i>op2</i>. </li><li><a href="352401d6-c6d1-29c1-a9f6-e5e0ed46bc86.htm">mpf_div_2exp</a> - Set <i>rop</i> to <i>op1</i> / 2^<i>op2</i>. </li></ul><p><a name="Float_Comparison" /><h4>Float Comparison:</h4></p><ul><li><a href="be9e6a25-83fb-49c2-949a-b8642a8234f5.htm">mpf_cmp</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="5236d7a8-b79f-add8-4898-997e9d6a68bf.htm">mpf_cmp_z</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="4f0f115a-3956-13f7-4d6f-0157936c03bd.htm">mpf_cmp_d</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="5a168ae0-405b-7259-0853-84999876c47a.htm">mpf_cmp_ui</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="d9d29633-42c7-fb1c-cdee-3b7993f45653.htm">mpf_cmp_si</a> - Compare <i>op1</i> and <i>op2</i>.</li><li><a href="f485faa1-3758-8316-f712-42e0fc2058a8.htm">mpf_reldiff</a> - Compute the relative difference between <i>op1</i> and <i>op2</i> and store the result in <i>rop</i>. This is | <i>op1</i> - <i>op2</i> | / <i>op1</i>. </li><li><a href="d229629f-3bba-817b-d9a3-6f00271e1da7.htm">mpf_sgn</a> - Return +1 if op &gt; 0, 0 if op = 0, and -1 if op &lt; 0. </li></ul><p><a name="IO_of_Floats" /><h4>I/O of Floats:</h4></p><ul><li><a href="feafa6f8-9793-d704-31a8-67c2cec0c33e.htm">mpf_out_str</a> - Print <i>op</i> to <i>stream</i>, as a string of digits.</li><li><a href="3a24f5bd-0b45-8164-f27b-c2e04e35ab64.htm">mpf_inp_str</a> - Read a string in base <i>base</i> from <i>stream</i>, and put the read float in <i>rop</i>.</li></ul><p><a name="Miscellaneous_Float_Functions" /><h4>Miscellaneous Float Functions:</h4></p><ul><li><a href="9b4a5f6b-3f8e-a957-ae84-303c6897aeb4.htm">mpf_ceil</a> - Set <i>rop</i> to <i>op</i> rounded to the next higher integer. </li><li><a href="f7584918-b77f-3524-eea2-04134a2c3ba6.htm">mpf_floor</a> - Set <i>rop</i> to <i>op</i> rounded to the next lower integer.</li><li><a href="3ac2ecd4-f154-de62-9170-b2d28f362a7e.htm">mpf_trunc</a> - Set <i>rop</i> to <i>op</i> rounded to the integer towards zero. </li><li><a href="11a036ec-5052-7dc4-bdb6-10e5c92f88cc.htm">mpf_integer_p</a> - Return non-zero if <i>op</i> is an integer.</li><li><a href="d1b172bb-9c87-c255-a736-4b8ef1f6a5fe.htm">mpf_fits_ulong_p</a> - Return non-zero if <i>op</i> fits in an unsigned 32-bit integer, when truncated to an integer. </li><li><a href="6c178e2d-a080-13b8-75b0-3fe232b46d75.htm">mpf_fits_slong_p</a> - Return non-zero if <i>op</i> fits in a 32-bit integer, when truncated to an integer. </li><li><a href="201b1b12-bb0c-6a53-c6d5-e75db73f8470.htm">mpf_fits_uint_p</a> - Return non-zero if <i>op</i> fits in an unsigned 32-bit integer, when truncated to an integer. </li><li><a href="5ea7691b-2a0f-5f25-290c-54c78e2cf3bd.htm">mpf_fits_sint_p</a> - Return non-zero if <i>op</i> fits in a 32-bit integer, when truncated to an integer. </li><li><a href="142199e1-6aef-83d5-1986-1b1248ddc6e3.htm">mpf_fits_sshort_p</a> - Return non-zero if <i>op</i> fits in a 16-bit integer, when truncated to an integer. </li><li><a href="ada84e5e-397e-e963-7d50-e260d4a104f7.htm">mpf_fits_ushort_p</a> - Return non-zero if <i>op</i> fits in an unsigned 16-bit integer, when truncated to an integer. </li><li><a href="5a698221-639e-333b-061b-0aa3f76c38e9.htm">mpf_urandomb</a> - Generate a uniformly distributed random float in <i>rop</i>, such that 0 ≤ rop &lt; 1, with <i>nbits</i> significant bits in the mantissa or less if the precision of <i>rop</i> is smaller.</li><li><a href="cc6e8f51-f396-f6c3-c6e4-9a9aeeaf2a13.htm">mpf_random2</a> - Generate a random float of at most <i>max_size</i> limbs, with long strings of zeros and ones in the binary representation.</li></ul><p><a name="Low_level_Functions" /><h3>Low-level Functions:</h3></p><ul><li><a href="339edb73-5781-7d73-97b6-9b73451a698f.htm">mpn_add_n</a> - Add {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the <i>n</i> least significant limbs of the result to <i>rp</i>. </li><li><a href="5562b14f-48a4-be75-2eb0-6a129cd0d5ab.htm">mpn_add_1</a> - Add {<i>s1p</i>, <i>n</i>} and <i>s2limb</i>, and write the <i>n</i> least significant limbs of the result to <i>rp</i>.</li><li><a href="b9df04c4-224e-f2ad-8e90-fbb3b30bd76d.htm">mpn_add</a> - Add {<i>s1p</i>, <i>s1n</i>} and {<i>s2p</i>, <i>s2n</i>}, and write the <i>s1n</i> least significant limbs of the result to <i>rp</i>. </li><li><a href="b104184e-cf49-dbdb-764a-9dee5cf7b2fd.htm">mpn_sub_n</a> - Subtract {<i>s2p</i>, <i>n</i>} from {<i>s1p</i>, <i>n</i>}, and write the <i>n</i> least significant limbs of the result to <i>rp</i>.</li><li><a href="ae3c6cf7-08a0-54dd-951f-b2fe2112b8b0.htm">mpn_sub_1</a> - Subtract <i>s2limb</i> from {<i>s1p</i>, <i>n</i>}, and write the <i>n</i> least significant limbs of the result to <i>rp</i>.</li><li><a href="87681f32-b766-3ce2-7c08-98b2d32cb5fa.htm">mpn_sub</a> - Subtract {<i>s2p</i>, <i>s2n</i>} from {<i>s1p</i>, <i>s1n</i>}, and write the <i>s1n</i> least significant limbs of the result to <i>rp</i>.</li><li><a href="9fb96802-e56e-8fd8-cef2-b44870d09a10.htm">mpn_neg</a> - Perform the negation of {<i>sp</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}.</li><li><a href="ee321a9a-852a-993e-f602-72ff2af02ff6.htm">mpn_mul_n</a> - Multiply {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the (2 * <i>n</i>)-limb result to <i>rp</i>.</li><li><a href="68d3161d-2909-1909-cda7-e87949ee27ce.htm">mpn_mul</a> - Multiply {<i>s1p</i>, <i>s1n</i>} and {<i>s2p</i>, <i>s2n</i>}, and write the (<i>s1n</i> + <i>s2n</i>)-limb result to <i>rp</i>.</li><li><a href="ff9c2930-ded2-c5b6-46dd-3ff9279cdc5e.htm">mpn_sqr</a> - Compute the square of {<i>s1p</i>, <i>n</i>} and write the (2 * <i>n</i>)-limb result to <i>rp</i>.</li><li><a href="b819fb3b-5d3e-ff23-1687-0e71af684bd7.htm">mpn_mul_1</a> - Multiply {<i>s1p</i>, <i>n</i>} by <i>s2limb</i>, and write the <i>n</i> least significant limbs of the product to <i>rp</i>.</li><li><a href="77fdf32b-986d-4df3-3c76-022e3e3fbb98.htm">mpn_addmul_1</a> - Multiply {<i>s1p</i>, <i>n</i>} and <i>s2limb</i>, and add the <i>n</i> least significant limbs of the product to {<i>rp</i>, <i>n</i>} and write the result to <i>rp</i>. </li><li><a href="95e10fea-31c2-e900-c5b0-f48636e1d76e.htm">mpn_submul_1</a> - Multiply {<i>s1p</i>, <i>n</i>} and <i>s2limb</i>, and subtract the <i>n</i> least significant limbs of the product from {<i>rp</i>, <i>n</i>} and write the result to <i>rp</i>.</li><li><a href="9fe90631-f519-1cf3-5a20-701d2bae1d0d.htm">mpn_tdiv_qr</a> - Divide {<i>np</i>, <i>nn</i>} by {<i>dp</i>, <i>dn</i>} and put the quotient at {<i>qp</i>, <i>nn</i> - <i>dn</i> + 1} and the remainder at {<i>rp</i>, <i>dn</i>}.</li><li><a href="f5c3f25d-1ad5-b3be-fc4b-280a62869912.htm">mpn_divrem_1</a> - Divide {<i>s2p</i>, <i>s2n</i>} by <i>s3limb</i>, and write the quotient at <i>r1p</i>.</li><li><a href="9074a45b-0d68-cf18-75fe-076e720a9a61.htm">mpn_divmod_1</a> - Divide {<i>s2p</i>, <i>s2n</i>} by <i>s3limb</i>, and write the quotient at <i>r1p</i>.</li><li><a href="1d6343a5-d42c-c362-714e-e10730e6a6d5.htm">mpn_divexact_1</a> - Divide {<i>sp</i>, <i>n</i>} by <i>d</i>, expecting it to divide exactly, and writing the result to {r<i>rp</i>, <i>n</i>}.</li><li><a href="75f2a84e-44f3-b7cc-e6ad-392111d5b9cc.htm">mpn_divexact_by3</a> - Divide {<i>sp</i>, <i>n</i>} by 3, expecting it to divide exactly, and writing the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="c40ea3de-d1be-146b-fe7a-deff566ca817.htm">mpn_divexact_by3c</a> - Divide {<i>sp</i>, <i>n</i>} by 3, expecting it to divide exactly, and writing the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="9aa24cc8-8cf5-4b8a-cd1b-5ded400efa50.htm">mpn_mod_1</a> - Divide {<i>s1p</i>, <i>s1n</i>} by <i>s2limb</i>, and return the remainder. </li><li><a href="b52f3ab3-7ad3-7dde-14a2-83c81840b829.htm">mpn_lshift</a> - Shift {<i>sp</i>, <i>n</i>} left by <i>count</i> bits, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="bb46ebe4-c002-8769-19ed-136a86e87134.htm">mpn_rshift</a> - Shift {<i>sp</i>, <i>n</i>} right by <i>count</i> bits, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="4fcc5434-e328-6730-f46e-bd0823ec7560.htm">mpn_cmp</a> - Compare {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}.</li><li><a href="2e469258-d5e3-da86-aebe-025b92d7cf73.htm">mpn_zero_p</a> - Test {<i>sp</i>, <i>n</i>} and return 1 if the operand is zero, 0 otherwise.</li><li><a href="24ecd2d5-422f-e538-fd43-94b749652393.htm">mpn_gcd</a> - Set {<i>rp</i>, retval} to the greatest common divisor of {<i>xp</i>, <i>xn</i>} and {<i>yp</i>, <i>yn</i>}.</li><li><a href="64373933-f98b-74b4-c10f-3b1a98c410bc.htm">mpn_gcd_1</a> - Return the greatest common divisor of {<i>xp</i>, <i>xn</i>} and <i>ylimb</i>.</li><li><a href="1d98a5d2-dff5-3fd2-c322-13c56beabb21.htm">mpn_gcdext</a> - Compute the greatest common divisor G of U and V. Compute a cofactor S such that G = US + VT.</li><li><a href="ee31871c-38bd-fccc-77f5-e76909dd7a79.htm">mpn_sqrtrem</a> - Compute the square root of {<i>sp</i>, <i>n</i>} and put the result at {<i>r1p</i>, ceil(<i>n</i> / 2)} and the remainder at {<i>r2p</i>, retval}.</li><li><a href="fb2d29b4-f7e2-e3d6-6fcb-920f2e86c0d7.htm">mpn_sizeinbase</a> - Return the size of {<i>xp</i>, <i>n</i>} measured in number of digits in the given <i>base</i>.</li><li><a href="1e9cacd7-32b3-7f3b-659a-efdb3e064092.htm">mpn_get_str</a> - Convert {<i>s1p</i>, <i>s1n</i>} to a raw unsigned char array at <i>str</i> in base <i>base</i>, and return the number of characters produced.</li><li><a href="9a68645a-d8d6-f4c1-f706-0dc217f9809a.htm">mpn_set_str</a> - Convert bytes {<i>str</i>, <i>strsize</i>} in the given <i>base</i> to limbs at <i>rp</i>. </li><li><a href="ae66c86a-cc34-81be-2a38-e841e8a36f43.htm">mpn_scan0</a> - Scan <i>s1p</i> from bit position <i>bit</i> for the next clear bit.</li><li><a href="95c5a467-0bfe-337e-f6ca-657cf8c19eb1.htm">mpn_scan1</a> - Scan <i>s1p</i> from bit position <i>bit</i> for the next set bit.</li><li><a href="6d4f993a-1fd6-9db2-c0a7-0f3926863565.htm">mpn_random</a> - Generate a random number of length <i>r1n</i> and store it at <i>r1p</i>.</li><li><a href="06d850ef-82b2-56f1-32ae-2f1724da3d5b.htm">mpn_random2</a> - Generate a random number of length <i>r1n</i> and store it at <i>r1p</i>.</li><li><a href="3bd9de08-5768-bb79-1e09-2953ae1483aa.htm">mpn_popcount</a> - Count the number of set bits in {<i>s1p</i>, <i>n</i>}. </li><li><a href="caf28774-7b13-0802-858c-a49970d7aa55.htm">mpn_hamdist</a> - Compute the hamming distance between {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, which is the number of bit positions where the two operands have different bit values. </li><li><a href="a5dfd9bc-f86b-8a3b-69fc-8d2d5dea30ae.htm">mpn_perfect_square_p</a> - Return non-zero iff {<i>s1p</i>, <i>n</i>} is a perfect square.</li><li><a href="61401484-d06f-ab9e-110d-b46f4d0a9eba.htm">mpn_perfect_power_p</a> - Return non-zero iff {<i>sp</i>, <i>n</i>} is a perfect power.</li><li><a href="69ffabc9-a19c-6590-d918-fbf0710aff82.htm">mpn_and_n</a> - Perform the bitwise logical and of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="f4c54e3b-1c09-d01d-eb28-b7b05cf6fa70.htm">mpn_ior_n</a> - Perform the bitwise logical inclusive or of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="0f01fecd-9200-982d-c331-c213f3b960a1.htm">mpn_xor_n</a> - Perform the bitwise logical exclusive or of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="b8b6d088-3330-5073-dc17-18ea23b0fc14.htm">mpn_andn_n</a> - Perform the bitwise logical and of {<i>s1p</i>, <i>n</i>} and the bitwise complement of {<i>s2p</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}.</li><li><a href="1b76ffd8-d7f4-5309-3b10-e7e0c418706a.htm">mpn_iorn_n</a> - Perform the bitwise logical inclusive or of {<i>s1p</i>, <i>n</i>} and the bitwise complement of {<i>s2p</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="a7d1fd40-0415-b4af-1787-706d245ff96e.htm">mpn_nand_n</a> - Perform the bitwise logical and of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the bitwise complement of the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="c7d8bbe3-23cd-3460-be24-3a3ac3b28cf4.htm">mpn_nior_n</a> - Perform the bitwise logical inclusive or of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the bitwise complement of the result to {<i>rp</i>, <i>n</i>}.</li><li><a href="25d623c3-ee22-4b83-1161-3f98ce698012.htm">mpn_xnor_n</a> - Perform the bitwise logical exclusive or of {<i>s1p</i>, <i>n</i>} and {<i>s2p</i>, <i>n</i>}, and write the bitwise complement of the result to {<i>rp</i>, <i>n</i>}. </li><li><a href="6f0c915a-514a-fce0-957b-50180f4b79a7.htm">mpn_com</a> - Perform the bitwise complement of {<i>sp</i>, <i>n</i>}, and write the result to {<i>rp</i>, <i>n</i>}.</li><li><a href="00d8413a-b34b-5e89-193c-1bfe522710c5.htm">mpn_copyi</a> - Copy from {<i>s1p</i>, <i>n</i>} to {<i>rp</i>, <i>n</i>}, increasingly. </li><li><a href="78443f19-f0c6-4a1f-1eed-a815b734e981.htm">mpn_copyd</a> - Copy from {<i>s1p</i>, <i>n</i>} to {<i>rp</i>, <i>n</i>}, decreasingly. </li><li><a href="90a57214-6596-be63-31e7-aa3186252628.htm">mpn_zero</a> - Zero {<i>rp</i>, <i>n</i>}.</li></ul><p><a name="Low_level_functions_for_cryptography" /><h4>Low-level functions for cryptography:</h4></p><ul><li><a href="27902901-3a7d-b5b3-d3fc-3900f754bff1.htm">mpn_cnd_add_n</a> - If <i>cnd</i> is non-zero, it produces the same result as a regular <a href="339edb73-5781-7d73-97b6-9b73451a698f.htm">mpn_add_n</a>, and if <i>cnd</i> is zero, it copies {<i>s1p</i>, <i>n</i>} to the result area and returns zero.</li><li><a href="b82bad6a-f8f0-db53-a6d3-ed6002046257.htm">mpn_cnd_sub_n</a> - If <i>cnd</i> is non-zero, it produces the same result as a regular <a href="b104184e-cf49-dbdb-764a-9dee5cf7b2fd.htm">mpn_sub_n</a>, and if <i>cnd</i> is zero, it copies {<i>s1p</i>, <i>n</i>} to the result area and returns zero.</li><li><a href="1555cd52-98d2-6253-214a-d342a539bfb5.htm">mpn_sec_add_1</a> - Set R to A + b, where R = {<i>rp</i>, <i>n</i>}, A = {<i>ap</i>, <i>n</i>}, and <i>b</i> is a single limb.</li><li><a href="87bbc39f-b11a-76d9-f31d-f5dcf365a67d.htm">mpn_sec_add_1_itch</a> - Return the scratch space in number of limbs required by the function <a href="1555cd52-98d2-6253-214a-d342a539bfb5.htm">mpn_sec_add_1</a>.</li><li><a href="9137a632-abd2-7963-1991-85e6d753bf13.htm">mpn_sec_sub_1</a> - Set R to A - b, where R = {<i>rp</i>, <i>n</i>}, A = {<i>ap</i>, <i>n</i>}, and <i>b</i> is a single limb.</li><li><a href="098c8787-2069-5d1e-a2f9-1f78bdcd60a9.htm">mpn_sec_sub_1_itch</a> - Return the scratch space in number of limbs required by the function <a href="9137a632-abd2-7963-1991-85e6d753bf13.htm">mpn_sec_sub_1</a>.</li><li><a href="f0985ccc-17da-8a0b-066c-53df9b1921a1.htm">mpn_cnd_swap</a> - If <i>cnd</i> is non-zero, swaps the contents of the areas {<i>ap</i>, <i>n</i>} and {<i>bp</i>, <i>n</i>}. Otherwise, the areas are left unmodified.</li><li><a href="028e92d4-3699-77ff-e8da-9ff4c367f5b3.htm">mpn_sec_mul</a> - Set R to A * B, where A = {<i>ap</i>, <i>an</i>}, B = {<i>bp</i>, <i>bn</i>}, and R = {<i>rp</i>, <i>an</i> + <i>bn</i>}. </li><li><a href="b07466c5-6249-332d-e89b-aeb3675970ff.htm">mpn_sec_mul_itch</a> - Return the scratch space in number of limbs required by the function <a href="028e92d4-3699-77ff-e8da-9ff4c367f5b3.htm">mpn_sec_mul</a>.</li><li><a href="bfe1e9b5-6fc1-95f2-d5b6-137fe87c071a.htm">mpn_sec_sqr</a> - Set R to A^2, where A = {<i>ap</i>, <i>an</i>}, and R = {<i>rp</i>, 2 * <i>an</i>}. </li><li><a href="1ba86b5b-8ace-b6ee-99c5-32a8d7648519.htm">mpn_sec_sqr_itch</a> - Return the scratch space in number of limbs required by the function <a href="bfe1e9b5-6fc1-95f2-d5b6-137fe87c071a.htm">mpn_sec_sqr</a>.</li><li><a href="a38b87c5-c6ac-fa68-6d58-c45793bf933e.htm">mpn_sec_powm</a> - Set R to (B^E) modulo M, where R = {<i>rp</i>, <i>n</i>}, M = {<i>mp</i>, <i>n</i>}, and E = {<i>ep</i>, ceil(<i>enb</i> / <a href="f88c76a8-118a-5cbd-0df1-e30adcacb8ae.htm">mp_bits_per_limb</a>)}.</li><li><a href="96652cce-b8f1-0b9e-8434-19cf9bb3eb29.htm">mpn_sec_powm_itch</a> - Return the scratch space in number of limbs required by the function <a href="a38b87c5-c6ac-fa68-6d58-c45793bf933e.htm">mpn_sec_powm</a>.</li><li><a href="3588cf60-567a-6182-20e8-5e2836498f49.htm">mpn_sec_tabselect</a> - Select entry <i>which</i> from table <i>tab</i>, which has <i>nents</i> entries, each <i>n</i> limbs. Store the selected entry at <i>rp</i>.</li><li><a href="6f1dca2b-39f4-3acd-71fb-4f1e5a0d04e6.htm">mpn_sec_div_qr</a> - Set Q to the truncated quotient N / D and R to N modulo D, where N = {<i>np</i>, <i>nn</i>}, D = {<i>dp</i>, <i>dn</i>}, Q’s most significant limb is the function return value and the remaining limbs are {<i>qp</i>, <i>nn</i> - <i>dn</i>}, and R = {<i>np</i>, <i>dn</i>}. </li><li><a href="b9e1a8f8-5156-ca69-337b-e67c2fd851f7.htm">mpn_sec_div_qr_itch</a> - Return the scratch space in number of limbs required by the function <a href="6f1dca2b-39f4-3acd-71fb-4f1e5a0d04e6.htm">mpn_sec_div_qr</a>.</li><li><a href="094ea390-8cc8-bac7-35c3-3616775736de.htm">mpn_sec_div_r</a> - Set R to N modulo D, where N = {<i>np</i>, <i>nn</i>}, D = {<i>dp</i>, <i>dn</i>}, and R = {<i>np</i>, <i>dn</i>}. </li><li><a href="1cefa5f6-adc3-30a6-b3bd-cb6a7543cb00.htm">mpn_sec_div_r_itch</a> - Return the scratch space in number of limbs required by the function <a href="094ea390-8cc8-bac7-35c3-3616775736de.htm">mpn_sec_div_r</a>.</li><li><a href="62ffb793-b32f-e0dc-a399-f20fe708a803.htm">mpn_sec_invert</a> - Set R to the inverse of A modulo M, where R = {<i>rp</i>, <i>n</i>}, A = {<i>ap</i>, <i>n</i>}, and M = {<i>mp</i>, <i>n</i>}. This function’s interface is preliminary. </li><li><a href="ec24a122-714e-5b6f-9872-95fd5fda54ea.htm">mpn_sec_invert_itch</a> - Return the scratch space in number of limbs required by the function <a href="62ffb793-b32f-e0dc-a399-f20fe708a803.htm">mpn_sec_invert</a>.</li></ul><p><a name="Random_Number_Functions" /><h3>Random Number Functions:</h3></p><p><a name="Random_State_Initialization" /><h4>Random State Initialization:</h4></p><ul><li><a href="89fff39e-9dc4-4d23-9460-301ae7df92d1.htm">gmp_randinit_default</a> - Initialize <i>state</i> with a default algorithm.</li><li><a href="b3ed0ded-086a-41f1-6051-d08afa338da8.htm">gmp_randinit_mt</a> - Initialize <i>state</i> for a Mersenne Twister algorithm.</li><li><a href="21fdbc76-a0de-1f3a-195f-a5ae0cb3d1da.htm">gmp_randinit_lc_2exp</a> - Initialize <i>state</i> with a linear congruential algorithm X = (<i>a</i>X + <i>c</i>) mod 2^<i>m2exp</i>.</li><li><a href="f209112e-311a-88cd-becf-33bc3787f91d.htm">gmp_randinit_lc_2exp_size</a> - Initialize <i>state</i> for a linear congruential algorithm as per <a href="21fdbc76-a0de-1f3a-195f-a5ae0cb3d1da.htm">gmp_randinit_lc_2exp</a>.</li><li><a href="494fa261-4044-f216-7041-a55d95a26f5b.htm">gmp_randinit_set</a> - Initialize <i>rop</i> with a copy of the algorithm and state from <i>op</i>.</li><li><a href="7ef82a61-e43a-78c7-a28f-8f2d0a5f59b1.htm">gmp_randclear</a> - Free all memory occupied by <i>state</i>.</li></ul><p><a name="Random_State_Seeding" /><h4>Random State Seeding:</h4></p><ul><li><a href="b31d5778-362b-b75f-40cc-4c8280ca889c.htm">gmp_randseed</a> - Set an initial <i>seed</i> value into <i>state</i>.</li><li><a href="c5f4e595-de6c-a555-426d-6cb8f429a960.htm">gmp_randseed_ui</a> - Set an initial <i>seed</i> value into <i>state</i>.</li></ul><p><a name="Random_State_Miscellaneous" /><h4>Random State Miscellaneous:</h4></p><ul><li><a href="7b541895-53a8-b335-32de-d5b2224ff0f7.htm">gmp_urandomb_ui</a> - Generate a uniformly distributed random number of <i>n</i> bits, i.e. in the range 0 to 2^<i>n</i> - 1 inclusive.</li><li><a href="020d0663-b84b-54aa-8e2f-645ed532d175.htm">gmp_urandomm_ui</a> - Generate a uniformly distributed random number in the range 0 to <i>n</i> - 1, inclusive.</li></ul><p><a name="Formatted_Output" /><h3>Formatted Output:</h3></p><p><a name="Formatted_Output_Functions" /><h4>Formatted Output Functions:</h4></p><ul><li><a href="5c2015f3-41d2-7b80-5309-e41ccec0baaf.htm">gmp_printf</a> - Print to the standard output stdout.</li><li><a href="8031c594-b2b2-fa62-7088-00b6fe92f88e.htm">gmp_vprintf</a> - Print to the standard output stdout.</li><li><a href="e3abec5c-9d83-babc-a020-ca4817962a21.htm">gmp_fprintf</a> - Print to the stream <i>fp</i>.</li><li><a href="62c5f2f4-2a93-e6d2-b867-23d4f2b98af4.htm">gmp_vfprintf</a> - Print to the stream <i>fp</i>.</li><li><a href="8916c18b-a745-2699-2f0a-035cf62dd051.htm">gmp_sprintf</a> - Form a null-terminated string in <i>buf</i>.</li><li><a href="56e1a610-d238-ab9f-87b5-001764290847.htm">gmp_vsprintf</a> - Form a null-terminated string in <i>buf</i>.</li><li><a href="61686857-e4a0-ad60-1419-2b87a79b06c1.htm">gmp_snprintf</a> - Form a null-terminated string in <i>buf</i>.</li><li><a href="300c388f-ba1c-0ba3-64fd-e7aafb39dcdb.htm">gmp_vsnprintf</a> - Form a null-terminated string in <i>buf</i>.</li><li><a href="fe6e46c3-8464-a080-b5fc-718589320cd5.htm">gmp_asprintf</a> - Form a null-terminated string in a block of memory obtained from the current memory allocation function.</li><li><a href="bd7a38bd-df52-4b0f-36d4-eb539767d89f.htm">gmp_vasprintf</a> - Form a null-terminated string in a block of memory obtained from the current memory allocation function.</li></ul><p><a name="Formatted_Input" /><h3>Formatted Input:</h3></p><p><a name="Formatted_Input_Functions" /><h4>Formatted Input Functions:</h4></p><ul><li><a href="880c96b7-378e-3cdb-057e-b6eea1c9e529.htm">gmp_scanf</a> - Read from the standard input stdin.</li><li><a href="e5060da5-cafd-67e7-f18f-3a9d3c2aba7d.htm">gmp_vscanf</a> - Read from the standard input stdin.</li><li><a href="50306850-d92d-5038-bbcc-c452cd3c69a9.htm">gmp_fscanf</a> - Read from the stream fp.</li><li><a href="316be139-2970-161f-ba7c-730f067b5cf3.htm">gmp_vfscanf</a> - Read from the stream fp.</li><li><a href="279d21b9-bd04-522e-0759-d1add6fe6fae.htm">gmp_sscanf</a> - Read from a null-terminated string <i>s</i>.</li><li><a href="1a966758-12dc-4da3-cb22-b3b3d788ba02.htm">gmp_vsscanf</a> - Read from a null-terminated string <i>s</i>.</li></ul><p><a name="Custom_Allocation" /><h3>Custom Allocation:</h3></p><ul><li><a href="15ac48e3-750c-d154-7d8f-6dcaa137f5db.htm">mp_set_memory_functions</a> - Replace the current allocation functions from the arguments.</li><li><a href="9a229bed-b8b6-e0ad-f153-689455252ec4.htm">mp_get_memory_functions</a> - Get the current allocation functions, storing function pointers to the locations given by the arguments.</li><li><a href="2c68671c-cd5c-e2ec-52a2-65b0ca31c3d1.htm">allocate</a> - Return a pointer to newly allocated space with at least <i>alloc_size</i> bytes.</li><li><a href="067f64f9-7014-8c6a-3c02-153c1460a1dd.htm">reallocate</a> - Resize a previously allocated block <i>ptr</i> of <i>old_size</i> bytes to be <i>new_size</i> bytes.</li><li><a href="92160da3-b1af-e005-cb05-e3fb4dd524d8.htm">free</a> - De-allocate the space pointed to by <i>ptrs</i>.</li><li><a href="e3d53be6-a0ad-fb21-5381-ff688f5984a6.htm">ZeroMemory</a> - The <a href="e3d53be6-a0ad-fb21-5381-ff688f5984a6.htm">ZeroMemory</a> routine fills a block of memory with zeros, given a pointer to the block and the length, in bytes, to be filled.</li></ul></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="d9c51b9f-0c54-770b-28ea-6eebd8fef368.htm">Math.Gmp.Native Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>